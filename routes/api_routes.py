from flask import Blueprint, jsonify, request
from services.search_service import SearchService
from services.stats_service import StatsService
from services.vacancy_service import VacancyService
import traceback

api_bp = Blueprint('api', __name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
search_service = SearchService()
stats_service = StatsService()
vacancy_service = VacancyService()

@api_bp.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        'status': 'healthy',
        'version': '2.0.0',
        'message': 'Job Parser System API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'parsers': ['hh', 'superjob']
    })

@api_bp.route('/search', methods=['POST'])
def search_vacancies():
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"""
    try:
        data = request.json
        query = data.get('vacancy', '').strip()
        city = data.get('city', '')

        if not query:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'}), 400

        results = search_service.search_all_sources(query, city)
        return jsonify(results)

    except Exception as e:
        print('üí• –û—à–∏–±–∫–∞ –≤ search_vacancies:', traceback.format_exc())
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {str(e)}'}), 500

@api_bp.route('/vacancies', methods=['GET'])
def get_all_vacancies():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        page = int(request.args.get('page', 1))
        per_page = int(request.args.get('per_page', 10))
        source = request.args.get('source', '')
        company = request.args.get('company', '')

        result = vacancy_service.get_vacancies_paginated(
            page=page,
            per_page=per_page,
            source=source,
            company=company
        )
        return jsonify(result)

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@api_bp.route('/clear-db', methods=['DELETE'])
def clear_database():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    try:
        result = vacancy_service.clear_all_vacancies()
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}'}), 500

@api_bp.route('/db-stats', methods=['GET'])
def get_db_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        stats = stats_service.get_db_statistics()
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@api_bp.route('/stats', methods=['GET'])
def get_full_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats = stats_service.get_full_statistics()
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)}), 500