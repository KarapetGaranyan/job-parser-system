from flask import Blueprint, jsonify, request
from datetime import datetime, timedelta

scheduler_bp = Blueprint('scheduler', __name__)

_scheduler_instance = None


def get_scheduler():
    global _scheduler_instance
    if _scheduler_instance is None:
        from services.scheduler_service import SchedulerService
        _scheduler_instance = SchedulerService()
    return _scheduler_instance


@scheduler_bp.route('/status')
def scheduler_status():
    """–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        scheduler_service = get_scheduler()
        status = scheduler_service.get_status()
        return jsonify(status)
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@scheduler_bp.route('/start', methods=['POST', 'GET'])
def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        scheduler_service = get_scheduler()
        scheduler_service.start()
        return jsonify({'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω', 'status': 'started'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@scheduler_bp.route('/stop', methods=['POST', 'GET'])
def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        scheduler_service = get_scheduler()
        scheduler_service.stop()
        return jsonify({'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'status': 'stopped'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@scheduler_bp.route('/add-search-job', methods=['POST'])
def add_search_job():
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        data = request.json
        keywords = data.get('keywords', '').strip()
        interval_minutes = int(data.get('interval_minutes', 60))
        city = data.get('city', '').strip()
        limit = int(data.get('limit', 20))
        run_immediately = data.get('run_immediately', False)

        if not keywords:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'}), 400

        if interval_minutes < 1:
            return jsonify({'error': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 1 –º–∏–Ω—É—Ç–∞'}), 400

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∑–∞–¥–∞—á–∏
        import time
        job_id = f'auto_search_{int(time.time())}'

        scheduler_service = get_scheduler()

        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        def search_function():
            return scheduler_service._custom_search_job(keywords, city, limit)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        scheduler_service.scheduler.add_job(
            func=search_function,
            job_id=job_id,
            interval_minutes=interval_minutes,
            run_immediately=run_immediately
        )

        keywords_list = [kw.strip() for kw in keywords.split('\n') if kw.strip()]
        city_info = f" –≤ –≥–æ—Ä–æ–¥–µ {city}" if city else ""

        return jsonify({
            'message': f'–ù–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–æ {len(keywords_list)} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º{city_info} –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω',
            'job_id': job_id,
            'keywords_count': len(keywords_list),
            'interval_minutes': interval_minutes,
            'city': city,
            'limit': limit
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@scheduler_bp.route('/remove-job/<job_id>', methods=['POST', 'DELETE'])
def remove_job(job_id):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        scheduler_service = get_scheduler()

        if job_id not in scheduler_service.scheduler.jobs:
            return jsonify({'error': f'–ó–∞–¥–∞—á–∞ "{job_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        del scheduler_service.scheduler.jobs[job_id]
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ '{job_id}'")

        return jsonify({
            'message': f'–ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ "{job_id}" —É–¥–∞–ª–µ–Ω–∞',
            'job_id': job_id
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@scheduler_bp.route('/run-job-now/<job_id>', methods=['POST'])
def run_job_now(job_id):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    try:
        scheduler_service = get_scheduler()

        if job_id not in scheduler_service.scheduler.jobs:
            return jsonify({'error': f'–ó–∞–¥–∞—á–∞ "{job_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ–π—á–∞—Å
        job = scheduler_service.scheduler.jobs[job_id]
        job['next_run'] = datetime.now()

        return jsonify({
            'message': f'–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ',
            'job_id': job_id
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@scheduler_bp.route('/clear-all-jobs', methods=['POST', 'DELETE'])
def clear_all_jobs():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"""
    try:
        scheduler_service = get_scheduler()
        deleted_count = scheduler_service.clear_all_jobs()

        return jsonify({
            'message': f'–í—Å–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã. –£–¥–∞–ª–µ–Ω–æ: {deleted_count}',
            'deleted_count': deleted_count
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500