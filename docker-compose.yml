# Job Parser System - Docker Compose
version: '3.8'

services:
  # Основное приложение Job Parser
  jobparser:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jobparser-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      # Персистентное хранение данных
      - jobparser_data:/app/data
      - jobparser_logs:/app/logs
      # Конфигурационные файлы (опционально)
      - ./config:/app/config:ro
    environment:
      # Основные настройки
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-me}
      - DEBUG=false

      # База данных
      - DATABASE_URL=sqlite:///data/vacancies.db

      # SuperJob API
      - SUPERJOB_SECRET=${SUPERJOB_SECRET:-}

      # Дополнительные настройки
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Moscow

    # Проверка здоровья
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Зависимости (если используете внешнюю БД)
    # depends_on:
    #   - postgres

    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # PostgreSQL (опционально, для продакшена)
  postgres:
    image: postgres:15-alpine
    container_name: jobparser-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=jobparser
      - POSTGRES_USER=jobparser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"

    # Для использования PostgreSQL раскомментируйте в jobparser сервисе:
    # environment:
    #   - DATABASE_URL=postgresql://jobparser:${POSTGRES_PASSWORD}@postgres:5432/jobparser

  # Redis (опционально, для кеширования)
  redis:
    image: redis:7-alpine
    container_name: jobparser-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Nginx (опционально, для продакшена)
  nginx:
    image: nginx:alpine
    container_name: jobparser-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - jobparser

  # Мониторинг с Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: jobparser-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana для визуализации (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: jobparser-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}

# Именованные тома для персистентности данных
volumes:
  jobparser_data:
    driver: local
  jobparser_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Сети для изоляции сервисов
networks:
  default:
    name: jobparser-network