import requests
from .base_parser import BaseParser
from typing import List, Dict
import os
import time


class SuperJobParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è SuperJob —á–µ—Ä–µ–∑ API"""

    def __init__(self):
        super().__init__('superjob')
        self.api_url = 'https://api.superjob.ru/2.0/vacancies'
        self.secret_key = os.getenv(
            'SUPERJOB_SECRET',
            'v3.r.137222938.adcc1bf5602cc5a2c697d63eb9c580dd5029f96f.049aae965267ebe71bbc7c587187da62cdbc560e'
        )
        self.headers = {
            'X-Api-App-Id': self.secret_key,
            'Content-Type': 'application/x-www-form-urlencoded'
        }

    def search(self, query: str, limit: int = 20, city: str = '') -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ SuperJob API —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –≥–æ—Ä–æ–¥—É"""
        print(f"üîç –ü–æ–∏—Å–∫ –≤ SuperJob: {query}" + (f" –≤ –≥–æ—Ä–æ–¥–µ {city}" if city else ""))
        vacancies = []
        page = 0
        per_page = min(20, limit)

        try:
            while len(vacancies) < limit:
                params = {
                    'keyword': query,
                    'page': page,
                    'count': per_page
                }

                # –î–û–ë–ê–í–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£ –ì–û–†–û–î–ê:
                if city:
                    params['keyword'] = f"{query} {city}"
                    print(f"üìç –ü–æ–∏—Å–∫ —Å –≥–æ—Ä–æ–¥–æ–º: '{query} {city}'")
                else:
                    params['keyword'] = query
                    print(f"üåç –ü–æ–∏—Å–∫ –±–µ–∑ –≥–æ—Ä–æ–¥–∞: '{query}'")

                # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                response = requests.get(
                    self.api_url,
                    headers=self.headers,
                    params=params,
                    timeout=10
                )
                response.raise_for_status()

                data = response.json()
                objects = data.get('objects', [])

                if not objects:
                    break

                for obj in objects:
                    if len(vacancies) >= limit:
                        break

                    try:
                        vacancy_data = self._parse_vacancy_object(obj)
                        if vacancy_data:
                            vacancies.append(vacancy_data)
                            self.save_vacancy(vacancy_data)

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ SuperJob: {e}")
                        continue

                if not data.get('more', False):
                    break

                page += 1
                time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ SuperJob: {e}")

        print(f"‚úÖ SuperJob: –Ω–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
        return vacancies

    def _parse_vacancy_object(self, obj: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ API"""
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
        salary_parts = []
        if obj.get('payment_from'):
            salary_parts.append(f"–æ—Ç {obj['payment_from']}")
        if obj.get('payment_to'):
            salary_parts.append(f"–¥–æ {obj['payment_to']}")
        if obj.get('currency'):
            salary_parts.append(obj['currency'])

        salary = ' '.join(salary_parts) if salary_parts else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'

        return {
            'title': obj.get('profession', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'link': obj.get('link', ''),
            'company': obj.get('firm_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            'salary': salary,
            'source': 'superjob'
        }