import threading
import time
from datetime import datetime, timedelta
from typing import Callable, Dict, Any
import logging

logger = logging.getLogger(__name__)

class SimpleScheduler:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""

    def __init__(self):
        self.jobs = {}
        self.running = False
        self.thread = None

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.running:
            return

        self.running = True
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        print("üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        if self.thread:
            self.thread.join()
        print("üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def add_job(self, func: Callable, job_id: str, interval_minutes: int = 60,
                run_immediately: bool = False, **kwargs):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"""
        next_run = datetime.now()
        if not run_immediately:
            next_run += timedelta(minutes=interval_minutes)

        self.jobs[job_id] = {
            'func': func,
            'interval': timedelta(minutes=interval_minutes),
            'next_run': next_run,
            'kwargs': kwargs,
            'last_run': None,
            'run_count': 0
        }

        print(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ '{job_id}' —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_minutes} –º–∏–Ω")

    def get_jobs_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        status = {}
        for job_id, job in self.jobs.items():
            status[job_id] = {
                'next_run': job['next_run'].strftime('%Y-%m-%d %H:%M:%S'),
                'last_run': job['last_run'].strftime('%Y-%m-%d %H:%M:%S') if job['last_run'] else '–ù–∏–∫–æ–≥–¥–∞',
                'run_count': job['run_count'],
                'interval_minutes': int(job['interval'].total_seconds() / 60)
            }
        return status

    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                current_time = datetime.now()

                for job_id, job in list(self.jobs.items()):
                    if current_time >= job['next_run']:
                        self._execute_job(job_id, job)

                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(30)

    def _execute_job(self, job_id: str, job: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"""
        try:
            print(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ '{job_id}' –≤ {datetime.now().strftime('%H:%M:%S')}")

            result = job['func'](**job['kwargs'])

            job['last_run'] = datetime.now()
            job['run_count'] += 1
            job['next_run'] = datetime.now() + job['interval']

            print(f"‚úÖ –ó–∞–¥–∞—á–∞ '{job_id}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤ {job['last_run'].strftime('%H:%M:%S')}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ '{job_id}': {e}")
            job['next_run'] = datetime.now() + timedelta(minutes=10)