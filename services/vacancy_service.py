from database.models import Vacancy, Session
from sqlalchemy import or_
from utils.search import SearchUtils


class VacancyService:
    def get_vacancies_paginated(self, page=1, per_page=10, source='', company=''):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        session = Session()
        try:
            query = session.query(Vacancy)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if source:
                query = query.filter(Vacancy.source == source)

            if company:
                query = query.filter(
                    Vacancy.company.ilike(f'%{company}%')
                )

            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            total = query.count()

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            offset = (page - 1) * per_page
            vacancies = query.offset(offset).limit(per_page).all()

            return {
                'vacancies': [SearchUtils.vacancy_to_dict(v) for v in vacancies],
                'pagination': {
                    'page': page,
                    'per_page': per_page,
                    'total': total,
                    'pages': (total + per_page - 1) // per_page
                }
            }
        finally:
            session.close()

    def clear_all_vacancies(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
        session = Session()
        try:
            count_before = session.query(Vacancy).count()
            deleted_count = session.query(Vacancy).delete()
            session.commit()

            print(f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –≤–∞–∫–∞–Ω—Å–∏–π")

            return {
                'success': True,
                'message': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞',
                'deleted_count': deleted_count,
                'count_before': count_before
            }
        except Exception as e:
            session.rollback()
            raise e
        finally:
            session.close()

    def get_total_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π"""
        session = Session()
        try:
            return session.query(Vacancy).count()
        finally:
            session.close()