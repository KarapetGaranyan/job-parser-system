import json
import os
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from threading import Thread
import uuid
from services.search_service import SearchService


class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á"""

    def __init__(self):
        self.scheduler_file = 'scheduler_data.json'
        self.is_running = False
        self.jobs = {}
        self.load_data()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.scheduler_file):
                with open(self.scheduler_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.is_running = data.get('running', False)
                    self.jobs = data.get('jobs', {})
                    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.jobs)} –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            else:
                self.save_data()
                print("üìã –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            self.is_running = False
            self.jobs = {}

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'running': self.is_running,
                'jobs': self.jobs,
                'last_update': datetime.now().isoformat()
            }

            with open(self.scheduler_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        return {
            'running': self.is_running,
            'jobs': self.jobs,
            'jobs_count': len(self.jobs),
            'last_check': datetime.now().isoformat()
        }

    def start(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            return {'status': 'already_running', 'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω'}

        self.is_running = True
        self.save_data()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = Thread(target=self._scheduler_loop, daemon=True)
        scheduler_thread.start()

        print("üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        return {'status': 'started', 'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'}

    def stop(self) -> Dict:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            return {'status': 'already_stopped', 'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

        self.is_running = False
        self.save_data()

        print("üî¥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return {'status': 'stopped', 'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

    def add_search_job(self, keywords: str, interval_minutes: int,
                       city: str = '', limit: int = 20, run_immediately: bool = False) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞"""
        job_id = f"search_{uuid.uuid4().hex[:8]}"

        # –ü–∞—Ä—Å–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords_list = [kw.strip() for kw in keywords.split('\n') if kw.strip()]

        next_run = datetime.now()
        if not run_immediately:
            next_run += timedelta(minutes=interval_minutes)

        job = {
            'id': job_id,
            'type': 'search',
            'keywords': keywords_list,
            'city': city,
            'limit': limit,
            'interval_minutes': interval_minutes,
            'next_run': next_run.isoformat(),
            'last_run': '–ù–∏–∫–æ–≥–¥–∞',
            'run_count': 0,
            'created': datetime.now().isoformat(),
            'status': 'active'
        }

        self.jobs[job_id] = job
        self.save_data()

        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞: {job_id}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if run_immediately and self.is_running:
            self.run_job_now(job_id)

        return job_id

    def remove_job(self, job_id: str) -> Dict:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        if job_id not in self.jobs:
            return {'status': 'not_found', 'message': f'–ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}

        del self.jobs[job_id]
        self.save_data()

        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {job_id}")
        return {'status': 'removed', 'message': f'–ó–∞–¥–∞—á–∞ {job_id} —É–¥–∞–ª–µ–Ω–∞'}

    def run_job_now(self, job_id: str) -> Dict:
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        if job_id not in self.jobs:
            return {'status': 'not_found', 'message': f'–ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}

        job = self.jobs[job_id]

        try:
            print(f"üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {job_id}")

            if job['type'] == 'search':
                self._execute_search_job(job)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
            job['last_run'] = datetime.now().isoformat()
            job['run_count'] = job.get('run_count', 0) + 1

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫
            next_run = datetime.now() + timedelta(minutes=job['interval_minutes'])
            job['next_run'] = next_run.isoformat()

            self.save_data()

            return {'status': 'executed', 'message': f'–ó–∞–¥–∞—á–∞ {job_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {job_id}: {e}")
            return {'status': 'error', 'message': str(e)}

    def clear_all_jobs(self) -> Dict:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        deleted_count = len(self.jobs)
        self.jobs = {}
        self.save_data()

        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ({deleted_count} —à—Ç.)")
        return {'status': 'cleared', 'deleted_count': deleted_count}

    def get_all_jobs(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        return self.jobs.copy()

    def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        print("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

        while self.is_running:
            try:
                current_time = datetime.now()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                for job_id, job in list(self.jobs.items()):
                    if job.get('status') != 'active':
                        continue

                    next_run_str = job.get('next_run')
                    if not next_run_str:
                        continue

                    try:
                        next_run = datetime.fromisoformat(next_run_str)

                        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É?
                        if current_time >= next_run:
                            print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {job_id}")
                            self.run_job_now(job_id)

                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {job_id}: {e}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∂–¥–µ–º
                self.save_data()
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

        print("üî¥ –¶–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _execute_search_job(self, job: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–∏—Å–∫–∞"""
        keywords = job.get('keywords', [])
        city = job.get('city', '')
        limit = job.get('limit', 20)

        search_service = SearchService()

        total_found = 0

        for keyword in keywords:
            try:
                print(f"üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫: '{keyword}'" + (f" –≤ {city}" if city else ""))

                results = search_service.search_all_sources(
                    query=keyword,
                    city=city,
                    limit=limit // len(keywords) if len(keywords) > 1 else limit
                )

                found_count = results.get('total', 0)
                total_found += found_count

                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {found_count} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}'")

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(2)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ '{keyword}': {e}")

        print(f"üéØ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_found} –≤–∞–∫–∞–Ω—Å–∏–π")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á–∏
        if 'stats' not in job:
            job['stats'] = {}

        job['stats']['last_execution'] = {
            'time': datetime.now().isoformat(),
            'found': total_found,
            'keywords_processed': len(keywords)
        }