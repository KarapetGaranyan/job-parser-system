from flask import Flask, jsonify, request, Response
from flask_cors import CORS
import os
from dotenv import load_dotenv
from database.models import init_db, Vacancy, Session
from parsers.hh_parser import HHParser
from parsers.superjob_parser import SuperJobParser
from utils.export import ExportUtils
import traceback

load_dotenv()

app = Flask(__name__)
CORS(app)

app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-secret-key')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
hh_parser = HHParser()
sj_parser = SuperJobParser()
export_utils = ExportUtils()


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –ø–æ–∏—Å–∫–∞"""
    html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Parser System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .card { box-shadow: 0 2px 4px rgba(0,0,0,0.1); border: none; }
        .navbar-brand { font-weight: bold; }
        .source-hh { border-left: 4px solid #28a745; }
        .source-superjob { border-left: 4px solid #17a2b8; }
        .pagination-controls { 
            background: #f8f9fa; 
            padding: 15px; 
            border-radius: 8px; 
            margin: 20px 0; 
        }
        .search-controls { 
            background: #f8f9fa; 
            padding: 15px; 
            border-radius: 8px; 
            margin-bottom: 20px; 
        }
        .progress-info {
            background: #e9ecef;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            font-family: monospace;
            font-size: 0.9em;
        }
        .max-mode {
            border: 2px solid #dc3545;
            background: #fff5f5;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">üîç Job Parser</a>
            <div class="navbar-nav">
                <a class="nav-link" href="/">–ü–æ–∏—Å–∫</a>
                <a class="nav-link" href="/api/vacancies">API</a>
                <a class="nav-link" href="/vacancies/text">–¢–µ–∫—Å—Ç</a>
                <a class="nav-link" href="/export/csv">CSV</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-10">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru –∏ SuperJob</h3>
                    </div>
                    <div class="card-body">
                        <form id="searchForm">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="vacancy" class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</label>
                                        <input type="text" class="form-control" id="vacancy" 
                                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" required>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label for="limitSelect" class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π</label>
                                        <select class="form-select" id="limitSelect">
                                            <option value="50">50 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                            <option value="100" selected>100 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                            <option value="200">200 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                            <option value="500">500 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                            <option value="1000">1000 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                            <option value="max">üöÄ –ú–∞–∫—Å–∏–º—É–º (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label for="sourceSelect" class="form-label">–ò—Å—Ç–æ—á–Ω–∏–∫–∏</label>
                                        <select class="form-select" id="sourceSelect">
                                            <option value="both">–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</option>
                                            <option value="hh">–¢–æ–ª—å–∫–æ HH.ru</option>
                                            <option value="superjob">–¢–æ–ª—å–∫–æ SuperJob</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div id="maxModeWarning" class="alert alert-warning max-mode" style="display: none;">
                                <h6>‚ö†Ô∏è –†–µ–∂–∏–º "–ú–∞–∫—Å–∏–º—É–º"</h6>
                                <p class="mb-1">–ë—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!</p>
                                <small>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.</small>
                            </div>

                            <button type="submit" class="btn btn-primary btn-lg" id="searchBtn">
                                <span id="spinner" class="spinner-border spinner-border-sm me-2" style="display: none;"></span>
                                <span id="searchText">–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏</span>
                            </button>
                        </form>

                        <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞ -->
                        <div id="progressContainer" class="mt-3" style="display: none;">
                            <div class="progress-info" id="progressInfo">
                                –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω...
                            </div>
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     id="progressBar" role="progressbar" style="width: 0%"></div>
                            </div>
                        </div>

                        <div id="results" class="mt-4" style="display: none;">
                            <div id="searchStats" class="mb-3"></div>

                            <!-- –ö–æ–Ω—Ç—Ä–æ–ª—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ -->
                            <div class="pagination-controls" id="paginationControls" style="display: none;">
                                <div class="row align-items-center">
                                    <div class="col-md-3">
                                        <label for="pageSize" class="form-label">–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</label>
                                        <select class="form-select" id="pageSize">
                                            <option value="10">10 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                            <option value="20" selected>20 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                            <option value="50">50 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                            <option value="100">100 –≤–∞–∫–∞–Ω—Å–∏–π</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="filterSource" class="form-label">–§–∏–ª—å—Ç—Ä:</label>
                                        <select class="form-select" id="filterSource">
                                            <option value="">–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</option>
                                            <option value="hh">HH.ru</option>
                                            <option value="superjob">SuperJob</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="sortBy" class="form-label">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                                        <select class="form-select" id="sortBy">
                                            <option value="default">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
                                            <option value="title">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                                            <option value="company">–ü–æ –∫–æ–º–ø–∞–Ω–∏–∏</option>
                                            <option value="source">–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3 text-end">
                                        <button class="btn btn-success" onclick="exportResults()">
                                            üì• –≠–∫—Å–ø–æ—Ä—Ç CSV
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π -->
                            <div id="vacanciesList"></div>

                            <!-- –ü–∞–≥–∏–Ω–∞—Ü–∏—è -->
                            <nav id="pagination" style="display: none;">
                                <div id="pageInfo" class="text-center mb-3 text-muted"></div>
                                <ul class="pagination justify-content-center" id="paginationList">
                                </ul>
                            </nav>
                        </div>

                        <div id="errorAlert" class="alert alert-danger mt-3" style="display: none;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let allVacancies = [];
    let filteredVacancies = [];
    let currentPage = 1;
    let currentPageSize = 20;
    let searchInProgress = false;

    document.addEventListener('DOMContentLoaded', function() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        document.getElementById('limitSelect').addEventListener('change', function() {
            const warning = document.getElementById('maxModeWarning');
            const searchText = document.getElementById('searchText');

            if (this.value === 'max') {
                warning.style.display = 'block';
                searchText.textContent = 'üöÄ –ù–∞–π—Ç–∏ –í–°–ï –≤–∞–∫–∞–Ω—Å–∏–∏';
            } else {
                warning.style.display = 'none';
                searchText.textContent = '–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏';
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        document.getElementById('searchForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            if (searchInProgress) {
                console.log('üîÑ –ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
                return;
            }

            const vacancy = document.getElementById('vacancy').value.trim();
            if (!vacancy) {
                showError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏');
                return;
            }

            const limitValue = document.getElementById('limitSelect').value;
            const limit = limitValue === 'max' ? 10000 : parseInt(limitValue); // 10000 –∫–∞–∫ "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å"
            const sources = document.getElementById('sourceSelect').value;

            console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫:', { vacancy, limit: limitValue, sources });

            searchInProgress = true;
            const searchBtn = document.getElementById('searchBtn');
            const spinner = document.getElementById('spinner');
            const progressContainer = document.getElementById('progressContainer');
            const progressInfo = document.getElementById('progressInfo');
            const progressBar = document.getElementById('progressBar');

            searchBtn.disabled = true;
            spinner.style.display = 'inline-block';
            progressContainer.style.display = 'block';
            progressBar.style.width = '10%';
            hideError();
            document.getElementById('results').style.display = 'none';

            if (limitValue === 'max') {
                progressInfo.innerHTML = 'üöÄ –†–µ–∂–∏–º "–ú–∞–∫—Å–∏–º—É–º": –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π...<br><small>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-5 –º–∏–Ω—É—Ç</small>';
            } else {
                progressInfo.innerHTML = `üîç –ü–æ–∏—Å–∫ ${limit} –≤–∞–∫–∞–Ω—Å–∏–π...`;
            }

            try {
                // –°–æ–∑–¥–∞–µ–º EventSource –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
                let eventSource = null;
                let progressInterval = null;

                // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                let progress = 10;
                progressInterval = setInterval(() => {
                    if (progress < 90) {
                        progress += Math.random() * 10;
                        progressBar.style.width = progress + '%';

                        if (progress < 30) {
                            progressInfo.innerHTML = 'üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HH.ru...';
                        } else if (progress < 60) {
                            progressInfo.innerHTML = 'üîç –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru...';
                        } else {
                            progressInfo.innerHTML = 'üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SuperJob...';
                        }
                    }
                }, 500);

                const response = await fetch('/api/search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        vacancy: vacancy,
                        limit: limit,
                        sources: sources,
                        unlimited: limitValue === 'max'
                    })
                });

                clearInterval(progressInterval);
                progressBar.style.width = '100%';
                progressInfo.innerHTML = '‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...';

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
                }

                const data = await response.json();
                console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', data);

                if (data.error) {
                    throw new Error(data.error);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                allVacancies = data.vacancies || [];
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:', allVacancies.length);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
                applyFilters();
                displayResults(data);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
                showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message);
                progressInfo.innerHTML = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ';
                progressBar.classList.add('bg-danger');
            } finally {
                searchInProgress = false;
                searchBtn.disabled = false;
                spinner.style.display = 'none';

                setTimeout(() => {
                    progressContainer.style.display = 'none';
                    progressBar.style.width = '0%';
                    progressBar.classList.remove('bg-danger');
                }, 2000);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        document.getElementById('pageSize').addEventListener('change', function() {
            currentPageSize = parseInt(this.value);
            currentPage = 1;
            displayPage();
        });

        document.getElementById('filterSource').addEventListener('change', function() {
            applyFilters();
            currentPage = 1;
            displayPage();
        });

        document.getElementById('sortBy').addEventListener('change', function() {
            applySorting();
            displayPage();
        });

        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        function applyFilters() {
            const sourceFilter = document.getElementById('filterSource').value;

            filteredVacancies = allVacancies.filter(vacancy => {
                if (sourceFilter && vacancy.source !== sourceFilter) {
                    return false;
                }
                return true;
            });

            console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä:', sourceFilter, '–†–µ–∑—É–ª—å—Ç–∞—Ç:', filteredVacancies.length);
            applySorting();
        }

        function applySorting() {
            const sortValue = document.getElementById('sortBy').value;

            switch(sortValue) {
                case 'title':
                    filteredVacancies.sort((a, b) => (a.title || '').localeCompare(b.title || ''));
                    break;
                case 'company':
                    filteredVacancies.sort((a, b) => (a.company || '').localeCompare(b.company || ''));
                    break;
                case 'source':
                    filteredVacancies.sort((a, b) => (a.source || '').localeCompare(b.source || ''));
                    break;
                default:
                    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
                    break;
            }

            console.log('üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:', sortValue);
        }

        function displayResults(data) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            let statsHtml = '<div class="row text-center mb-3">';

            // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            let totalClass = 'primary';
            let totalText = `${data.total} –Ω–∞–π–¥–µ–Ω–æ`;

            if (data.total >= 1000) {
                totalClass = 'success';
                totalText = `üéâ ${data.total} –Ω–∞–π–¥–µ–Ω–æ!`;
            } else if (data.total >= 500) {
                totalClass = 'info';
                totalText = `‚ú® ${data.total} –Ω–∞–π–¥–µ–Ω–æ`;
            }

            statsHtml += `<div class="col-md-4">
                <div class="alert alert-${totalClass} mb-0">
                    <strong>${totalText}</strong><br>–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π
                </div>
            </div>`;

            if (data.sources && data.sources.hh) {
                const hhStatus = data.sources.hh.status === 'success' ? 'success' : 'danger';
                statsHtml += `<div class="col-md-4">
                    <div class="alert alert-${hhStatus} mb-0">
                        <strong>${data.sources.hh.count}</strong><br>HH.ru
                        ${data.sources.hh.pages ? `<br><small>${data.sources.hh.pages} —Å—Ç—Ä–∞–Ω–∏—Ü</small>` : ''}
                    </div>
                </div>`;
            }

            if (data.sources && data.sources.superjob) {
                const sjStatus = data.sources.superjob.status === 'success' ? 'success' : 'danger';
                statsHtml += `<div class="col-md-4">
                    <div class="alert alert-${sjStatus} mb-0">
                        <strong>${data.sources.superjob.count}</strong><br>SuperJob
                        ${data.sources.superjob.pages ? `<br><small>${data.sources.superjob.pages} —Å—Ç—Ä–∞–Ω–∏—Ü</small>` : ''}
                    </div>
                </div>`;
            }

            statsHtml += '</div>';

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (data.total >= 100) {
                statsHtml += `<div class="alert alert-info">
                    <strong>üìà –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</strong> 
                    –ù–∞–π–¥–µ–Ω–æ ${data.total} –≤–∞–∫–∞–Ω—Å–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
                    ${data.total >= 500 ? '<br><strong>üí° –°–æ–≤–µ—Ç:</strong> –¢–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞!' : ''}
                </div>`;
            }

            document.getElementById('searchStats').innerHTML = statsHtml;

            if (filteredVacancies.length > 0) {
                document.getElementById('paginationControls').style.display = 'block';
                currentPage = 1;
                displayPage();
            } else {
                document.getElementById('vacanciesList').innerHTML = '<div class="alert alert-warning">–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                document.getElementById('pagination').style.display = 'none';
                document.getElementById('paginationControls').style.display = 'none';
            }

            document.getElementById('results').style.display = 'block';
            document.getElementById('results').scrollIntoView({ behavior: 'smooth' });
        }

        function displayPage() {
            const startIndex = (currentPage - 1) * currentPageSize;
            const endIndex = startIndex + currentPageSize;
            const pageVacancies = filteredVacancies.slice(startIndex, endIndex);

            let vacanciesHtml = '';

            if (pageVacancies.length > 0) {
                pageVacancies.forEach(function(vacancy, index) {
                    const globalIndex = startIndex + index + 1;
                    const title = vacancy.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                    const company = vacancy.company || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                    const salary = vacancy.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                    const location = vacancy.location || '';
                    const link = vacancy.link || '#';
                    const source = vacancy.source || 'unknown';

                    let sourceClass = 'secondary';
                    let sourceName = 'UNKNOWN';
                    let cardClass = '';

                    if (source === 'hh') {
                        sourceClass = 'success';
                        sourceName = 'HH.RU';
                        cardClass = 'source-hh';
                    } else if (source === 'superjob') {
                        sourceClass = 'info';
                        sourceName = 'SUPERJOB';
                        cardClass = 'source-superjob';
                    }

                    vacanciesHtml += `
                        <div class="card mb-3 ${cardClass}">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <div class="d-flex align-items-center mb-2">
                                            <span class="badge bg-light text-dark me-2">#${globalIndex}</span>
                                            <span class="badge bg-${sourceClass}">${sourceName}</span>
                                        </div>
                                        <h5 class="card-title">${title}</h5>
                                        <p class="card-text">
                                            <strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${company}<br>
                                            <strong>–ó–∞—Ä–ø–ª–∞—Ç–∞:</strong> ${salary}
                                            ${location ? `<br><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${location}` : ''}
                                        </p>
                                    </div>
                                </div>
                                <a href="${link}" target="_blank" class="btn btn-outline-primary btn-sm">
                                    üîó –û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
                                </a>
                            </div>
                        </div>
                    `;
                });
            } else {
                vacanciesHtml = '<div class="alert alert-warning">–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</div>';
            }

            document.getElementById('vacanciesList').innerHTML = vacanciesHtml;
            updatePagination();
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredVacancies.length / currentPageSize);

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const startItem = (currentPage - 1) * currentPageSize + 1;
            const endItem = Math.min(currentPage * currentPageSize, filteredVacancies.length);
            document.getElementById('pageInfo').innerHTML = 
                `–ü–æ–∫–∞–∑–∞–Ω–æ ${startItem}-${endItem} –∏–∑ ${filteredVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`;

            if (totalPages <= 1) {
                document.getElementById('pagination').style.display = 'none';
                return;
            }

            let paginationHtml = '';

            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
            paginationHtml += `
                <li class="page-item ${currentPage <= 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage - 1})" ${currentPage <= 1 ? 'tabindex="-1"' : ''}>
                        &laquo; –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                    </a>
                </li>
            `;

            // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            if (startPage > 1) {
                paginationHtml += `<li class="page-item">
                    <a class="page-link" href="#" onclick="changePage(1)">1</a>
                </li>`;
                if (startPage > 2) {
                    paginationHtml += `<li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHtml += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                    </li>
                `;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHtml += `<li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>`;
                }
                paginationHtml += `<li class="page-item">
                    <a class="page-link" href="#" onclick="changePage(${totalPages})">${totalPages}</a>
                </li>`;
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
            paginationHtml += `
                <li class="page-item ${currentPage >= totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage + 1})" ${currentPage >= totalPages ? 'tabindex="-1"' : ''}>
                        –°–ª–µ–¥—É—é—â–∞—è &raquo;
                    </a>
                </li>
            `;

            document.getElementById('paginationList').innerHTML = paginationHtml;
            document.getElementById('pagination').style.display = 'block';
        }

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.changePage = function(page) {
            const totalPages = Math.ceil(filteredVacancies.length / currentPageSize);

            if (page >= 1 && page <= totalPages && page !== currentPage) {
                currentPage = page;
                displayPage();
                document.getElementById('vacanciesList').scrollIntoView({ behavior: 'smooth' });
            }
        };

        window.exportResults = function() {
            if (filteredVacancies.length === 0) {
                showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
                return;
            }

            try {
                const csvContent = generateCSV(filteredVacancies);
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', `vacancies_${new Date().toISOString().split('T')[0]}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
                showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error.message);
            }
        };

        function generateCSV(vacancies) {
            const headers = ['‚Ññ', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ–º–ø–∞–Ω–∏—è', '–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–°—Å—ã–ª–∫–∞'];
            let csv = '\uFEFF' + headers.join(';') + '\n';

            vacancies.forEach((vacancy, index) => {
                const row = [
                    index + 1,
                    `"${(vacancy.title || '').replace(/"/g, '""')}"`,
                    `"${(vacancy.company || '').replace(/"/g, '""')}"`,
                    `"${(vacancy.salary || '').replace(/"/g, '""')}"`,
                    `"${(vacancy.location || '').replace(/"/g, '""')}"`,
                    (vacancy.source || 'unknown').toUpperCase(),
                    vacancy.link || ''
                ];
                csv += row.join(';') + '\n';
            });

            return csv;
        }

        function showError(message) {
            const errorAlert = document.getElementById('errorAlert');
            errorAlert.textContent = message;
            errorAlert.style.display = 'block';
            errorAlert.scrollIntoView({ behavior: 'smooth' });
        }

        function hideError() {
            document.getElementById('errorAlert').style.display = 'none';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        fetch('/api/health')
            .then(response => response.json())
            .then(data => console.log('‚úÖ API —Å—Ç–∞—Ç—É—Å:', data))
            .catch(error => {
                console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
                showError('API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
            });
    });
    </script>
</body>
</html>
    """
    return html


@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        'status': 'healthy',
        'version': '3.0.0',
        'message': 'Job Parser System API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'parsers': ['hh', 'superjob'],
        'features': ['unlimited_search', 'pagination', 'filters', 'export']
    })


@app.route('/api/search', methods=['POST'])
def search_vacancies():
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    try:
        data = request.json
        query = data.get('vacancy', '').strip()
        limit = data.get('limit', 100)
        sources = data.get('sources', 'both')
        unlimited = data.get('unlimited', False)

        if not query:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'}), 400

        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º "–º–∞–∫—Å–∏–º—É–º", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
        if unlimited:
            limit = 10000  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            print(f"üöÄ –†–ï–ñ–ò–ú –ú–ê–ö–°–ò–ú–£–ú: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
        else:
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {query} (–ª–∏–º–∏—Ç: {limit}, –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {sources})")

        results = {
            'query': query,
            'vacancies': [],
            'sources': {
                'hh': {'count': 0, 'status': 'pending', 'pages': 0},
                'superjob': {'count': 0, 'status': 'pending', 'pages': 0}
            },
            'total': 0,
            'limit': limit,
            'unlimited': unlimited
        }

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        if sources == 'both':
            hh_limit = limit // 2 if not unlimited else 5000
            sj_limit = limit - hh_limit if not unlimited else 5000
        elif sources == 'hh':
            hh_limit = limit
            sj_limit = 0
        elif sources == 'superjob':
            hh_limit = 0
            sj_limit = limit
        else:
            hh_limit = limit // 2 if not unlimited else 5000
            sj_limit = limit - hh_limit if not unlimited else 5000

        # –ü–æ–∏—Å–∫ –Ω–∞ HH.ru
        if hh_limit > 0:
            try:
                print(f"üìä –ü–∞—Ä—Å–∏–Ω–≥ HH.ru (–ª–∏–º–∏—Ç: {'–ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô' if unlimited else hh_limit})...")
                hh_vacancies = hh_parser.search(query, limit=hh_limit)
                results['vacancies'].extend(hh_vacancies)

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                pages_hh = len(hh_vacancies) // 50 + 1 if len(hh_vacancies) > 0 else 0

                results['sources']['hh'] = {
                    'count': len(hh_vacancies),
                    'status': 'success',
                    'pages': pages_hh
                }
                print(f"‚úÖ HH.ru: {len(hh_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π ({pages_hh} —Å—Ç—Ä–∞–Ω–∏—Ü)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ HH.ru: {e}")
                results['sources']['hh'] = {
                    'count': 0,
                    'status': 'error',
                    'error': str(e),
                    'pages': 0
                }

        # –ü–æ–∏—Å–∫ –Ω–∞ SuperJob
        if sj_limit > 0:
            try:
                print(f"üìä –ü–∞—Ä—Å–∏–Ω–≥ SuperJob (–ª–∏–º–∏—Ç: {'–ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô' if unlimited else sj_limit})...")
                sj_vacancies = sj_parser.search(query, limit=sj_limit)
                results['vacancies'].extend(sj_vacancies)

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                pages_sj = len(sj_vacancies) // 20 + 1 if len(sj_vacancies) > 0 else 0

                results['sources']['superjob'] = {
                    'count': len(sj_vacancies),
                    'status': 'success',
                    'pages': pages_sj
                }
                print(f"‚úÖ SuperJob: {len(sj_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π ({pages_sj} —Å—Ç—Ä–∞–Ω–∏—Ü)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ SuperJob: {e}")
                results['sources']['superjob'] = {
                    'count': 0,
                    'status': 'error',
                    'error': str(e),
                    'pages': 0
                }

        results['total'] = len(results['vacancies'])

        if unlimited:
            print(f"üéâ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù! –ù–∞–π–¥–µ–Ω–æ {results['total']} –≤–∞–∫–∞–Ω—Å–∏–π")
        else:
            print(f"üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ: {results['total']} –≤–∞–∫–∞–Ω—Å–∏–π")

        return jsonify(results)

    except Exception as e:
        print('üí• –û—à–∏–±–∫–∞ –≤ search_vacancies:', traceback.format_exc())
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {str(e)}'}), 500


@app.route('/api/vacancies', methods=['GET'])
def get_all_vacancies():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()

        result = {
            'vacancies': [],
            'total': len(vacancies)
        }

        for v in vacancies:
            result['vacancies'].append({
                'id': v.id,
                'title': v.title,
                'link': v.link,
                'company': v.company,
                'salary': v.salary,
                'location': getattr(v, 'location', ''),
                'source': v.source
            })

        session.close()
        return jsonify(result)

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/vacancies/text')
def vacancies_text():
    """–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()

        text_data = export_utils.to_text(vacancies)
        session.close()

        return f'<pre style="font-family: monospace; white-space: pre-wrap; padding: 20px;">{text_data}</pre>'

    except Exception as e:
        return f'<pre>–û—à–∏–±–∫–∞: {str(e)}</pre>'


@app.route('/export/csv')
def export_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ CSV"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()
        csv_data = export_utils.to_csv(vacancies)
        session.close()

        return Response(
            csv_data,
            mimetype='text/csv; charset=utf-8',
            headers={'Content-Disposition': 'attachment;filename=vacancies.csv'}
        )

    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Job Parser System v3.0 - UNLIMITED EDITION")
    print("=" * 60)
    print("üåê –ì–ª–∞–≤–Ω–∞—è: http://localhost:5000")
    print("üìä API: http://localhost:5000/api/health")
    print("üìã –¢–µ–∫—Å—Ç: http://localhost:5000/vacancies/text")
    print("üì• CSV: http://localhost:5000/export/csv")
    print("=" * 60)
    print("üì° –ü–∞—Ä—Å–µ—Ä—ã: HH.ru + SuperJob")
    print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite")
    print("")
    print("‚ú® –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò v3.0:")
    print("   üöÄ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
    print("   üìä –†–µ–∂–∏–º '–ú–∞–∫—Å–∏–º—É–º' - –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    print("   üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è")
    print("   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ–∏—Å–∫–∞")
    print("   üéØ –£–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    print("   üì• –≠–∫—Å–ø–æ—Ä—Ç –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("   üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º")
    print("")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∂–∏–º '–ú–∞–∫—Å–∏–º—É–º' –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!")
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    app.run(host='0.0.0.0', port=5000, debug=True)