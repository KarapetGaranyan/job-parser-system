from flask import Flask, jsonify, request, Response
from flask_cors import CORS
import os
from dotenv import load_dotenv
from database.models import init_db, Vacancy, Session
from parsers.hh_parser import HHParser
from parsers.superjob_parser import SuperJobParser
from utils.export import ExportUtils
import traceback

load_dotenv()

app = Flask(__name__)
CORS(app)

app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-secret-key')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
hh_parser = HHParser()
sj_parser = SuperJobParser()
export_utils = ExportUtils()


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –ø–æ–∏—Å–∫–∞"""
    html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Parser System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .card { box-shadow: 0 2px 4px rgba(0,0,0,0.1); border: none; }
        .navbar-brand { font-weight: bold; }
        .source-hh { border-left: 4px solid #28a745; }
        .source-superjob { border-left: 4px solid #17a2b8; }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">üîç Job Parser</a>
            <div class="navbar-nav">
                <a class="nav-link" href="/">–ü–æ–∏—Å–∫</a>
                <a class="nav-link" href="/api/vacancies">API</a>
                <a class="nav-link" href="/vacancies/text">–¢–µ–∫—Å—Ç</a>
                <a class="nav-link" href="/export/csv">CSV</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru –∏ SuperJob</h3>
                    </div>
                    <div class="card-body">
                        <form id="searchForm">
                            <div class="mb-3">
                                <label for="vacancy" class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</label>
                                <input type="text" class="form-control" id="vacancy" 
                                       placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" required>
                            </div>
                            <button type="submit" class="btn btn-primary" id="searchBtn">
                                <span id="spinner" class="spinner-border spinner-border-sm me-2" style="display: none;"></span>
                                –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
                            </button>
                        </form>

                        <div id="results" class="mt-4" style="display: none;">
                            <div id="searchStats" class="mb-3"></div>
                            <div id="vacanciesList"></div>
                        </div>

                        <div id="errorAlert" class="alert alert-danger mt-3" style="display: none;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchForm = document.getElementById('searchForm');
        const vacancyInput = document.getElementById('vacancy');
        const searchBtn = document.getElementById('searchBtn');
        const spinner = document.getElementById('spinner');
        const resultsDiv = document.getElementById('results');
        const searchStatsDiv = document.getElementById('searchStats');
        const vacanciesListDiv = document.getElementById('vacanciesList');
        const errorAlert = document.getElementById('errorAlert');

        searchForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            const vacancy = vacancyInput.value.trim();
            if (!vacancy) {
                showError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            searchBtn.disabled = true;
            spinner.style.display = 'inline-block';
            hideError();
            resultsDiv.style.display = 'none';

            try {
                console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫:', vacancy);

                const response = await fetch('/api/search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ vacancy: vacancy })
                });

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
                }

                const data = await response.json();
                console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', data);

                if (data.error) {
                    throw new Error(data.error);
                }

                displayResults(data);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
                showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message);
            } finally {
                searchBtn.disabled = false;
                spinner.style.display = 'none';
            }
        });

        function displayResults(data) {
            if (!data || !data.vacancies) {
                showError('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return;
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            let statsHtml = '<div class="row text-center mb-3">';
            statsHtml += `<div class="col-md-4"><div class="alert alert-primary mb-0"><strong>${data.total}</strong><br>–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ</div></div>`;

            if (data.sources.hh) {
                const hhStatus = data.sources.hh.status === 'success' ? 'success' : 'danger';
                statsHtml += `<div class="col-md-4"><div class="alert alert-${hhStatus} mb-0"><strong>${data.sources.hh.count}</strong><br>HH.ru</div></div>`;
            }

            if (data.sources.superjob) {
                const sjStatus = data.sources.superjob.status === 'success' ? 'success' : 'danger';
                statsHtml += `<div class="col-md-4"><div class="alert alert-${sjStatus} mb-0"><strong>${data.sources.superjob.count}</strong><br>SuperJob</div></div>`;
            }

            statsHtml += '</div>';

            searchStatsDiv.innerHTML = statsHtml;

            // –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            let vacanciesHtml = '';

            if (data.vacancies.length > 0) {
                data.vacancies.forEach(function(vacancy) {
                    const title = vacancy.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                    const company = vacancy.company || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                    const salary = vacancy.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                    const link = vacancy.link || '#';
                    const source = vacancy.source || 'unknown';

                    let sourceClass = 'secondary';
                    let sourceName = 'UNKNOWN';
                    let cardClass = '';

                    if (source === 'hh') {
                        sourceClass = 'success';
                        sourceName = 'HH.RU';
                        cardClass = 'source-hh';
                    } else if (source === 'superjob') {
                        sourceClass = 'info';
                        sourceName = 'SUPERJOB';
                        cardClass = 'source-superjob';
                    }

                    vacanciesHtml += `
                        <div class="card mb-3 ${cardClass}">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h5 class="card-title">${title}</h5>
                                        <p class="card-text">
                                            <strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${company}<br>
                                            <strong>–ó–∞—Ä–ø–ª–∞—Ç–∞:</strong> ${salary}
                                        </p>
                                    </div>
                                    <div>
                                        <span class="badge bg-${sourceClass}">${sourceName}</span>
                                    </div>
                                </div>
                                <a href="${link}" target="_blank" class="btn btn-outline-primary btn-sm">
                                    üîó –û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
                                </a>
                            </div>
                        </div>
                    `;
                });
            } else {
                vacanciesHtml = '<div class="alert alert-warning">–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            }

            vacanciesListDiv.innerHTML = vacanciesHtml;
            resultsDiv.style.display = 'block';
            resultsDiv.scrollIntoView({ behavior: 'smooth' });
        }

        function showError(message) {
            errorAlert.textContent = message;
            errorAlert.style.display = 'block';
        }

        function hideError() {
            errorAlert.style.display = 'none';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        fetch('/api/health')
            .then(response => response.json())
            .then(data => console.log('‚úÖ API —Å—Ç–∞—Ç—É—Å:', data))
            .catch(error => console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error));
    });
    </script>
</body>
</html>
    """
    return html


@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        'status': 'healthy',
        'version': '2.0.0',
        'message': 'Job Parser System API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'parsers': ['hh', 'superjob']
    })


@app.route('/api/search', methods=['POST'])
def search_vacancies():
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"""
    try:
        data = request.json
        query = data.get('vacancy', '').strip()

        if not query:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'}), 400

        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {query}")

        results = {
            'query': query,
            'vacancies': [],
            'sources': {
                'hh': {'count': 0, 'status': 'pending'},
                'superjob': {'count': 0, 'status': 'pending'}
            },
            'total': 0
        }

        # –ü–æ–∏—Å–∫ –Ω–∞ HH.ru
        try:
            print("üìä –ü–∞—Ä—Å–∏–Ω–≥ HH.ru...")
            hh_vacancies = hh_parser.search(query, limit=15)
            results['vacancies'].extend(hh_vacancies)
            results['sources']['hh'] = {
                'count': len(hh_vacancies),
                'status': 'success'
            }
            print(f"‚úÖ HH.ru: {len(hh_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ HH.ru: {e}")
            results['sources']['hh'] = {
                'count': 0,
                'status': 'error',
                'error': str(e)
            }

        # –ü–æ–∏—Å–∫ –Ω–∞ SuperJob
        try:
            print("üìä –ü–∞—Ä—Å–∏–Ω–≥ SuperJob...")
            sj_vacancies = sj_parser.search(query, limit=15)
            results['vacancies'].extend(sj_vacancies)
            results['sources']['superjob'] = {
                'count': len(sj_vacancies),
                'status': 'success'
            }
            print(f"‚úÖ SuperJob: {len(sj_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ SuperJob: {e}")
            results['sources']['superjob'] = {
                'count': 0,
                'status': 'error',
                'error': str(e)
            }

        results['total'] = len(results['vacancies'])
        print(f"üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ: {results['total']} –≤–∞–∫–∞–Ω—Å–∏–π")

        return jsonify(results)

    except Exception as e:
        print('üí• –û—à–∏–±–∫–∞ –≤ search_vacancies:', traceback.format_exc())
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {str(e)}'}), 500


@app.route('/api/vacancies', methods=['GET'])
def get_all_vacancies():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()

        result = {
            'vacancies': [],
            'total': len(vacancies)
        }

        for v in vacancies:
            result['vacancies'].append({
                'id': v.id,
                'title': v.title,
                'link': v.link,
                'company': v.company,
                'salary': v.salary,
                'source': v.source
            })

        session.close()
        return jsonify(result)

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/vacancies/text')
def vacancies_text():
    """–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()

        text_data = export_utils.to_text(vacancies)
        session.close()

        return f'<pre style="font-family: monospace; white-space: pre-wrap; padding: 20px;">{text_data}</pre>'

    except Exception as e:
        return f'<pre>–û—à–∏–±–∫–∞: {str(e)}</pre>'


@app.route('/export/csv')
def export_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ CSV"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()
        csv_data = export_utils.to_csv(vacancies)
        session.close()

        return Response(
            csv_data,
            mimetype='text/csv; charset=utf-8',
            headers={'Content-Disposition': 'attachment;filename=vacancies.csv'}
        )

    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Job Parser System v2.0")
    print("=" * 50)
    print("üåê –ì–ª–∞–≤–Ω–∞—è: http://localhost:5000")
    print("üìä API: http://localhost:5000/api/health")
    print("üìã –¢–µ–∫—Å—Ç: http://localhost:5000/vacancies/text")
    print("üì• CSV: http://localhost:5000/export/csv")
    print("=" * 50)
    print("üì° –ü–∞—Ä—Å–µ—Ä—ã: HH.ru + SuperJob")
    print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite")
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    app.run(host='0.0.0.0', port=5000, debug=True)
