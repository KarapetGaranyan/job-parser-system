from flask import Flask, jsonify, request, Response
from flask_cors import CORS
import os
from dotenv import load_dotenv
from database.models import init_db, Vacancy, Session
from parsers.hh_parser import HHParser
from parsers.superjob_parser import SuperJobParser
from utils.export import ExportUtils
import traceback

load_dotenv()

app = Flask(__name__)
CORS(app)

app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-secret-key')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
hh_parser = HHParser()
sj_parser = SuperJobParser()
export_utils = ExportUtils()


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –ø–æ–∏—Å–∫–∞"""
    html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Parser System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .card { box-shadow: 0 2px 4px rgba(0,0,0,0.1); border: none; }
        .navbar-brand { font-weight: bold; }
        .source-hh { border-left: 4px solid #28a745; }
        .source-superjob { border-left: 4px solid #17a2b8; }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">üîç Job Parser</a>
            <div class="navbar-nav">
                <a class="nav-link" href="/">–ü–æ–∏—Å–∫</a>
                <a class="nav-link" href="/api/vacancies">API</a>
                <a class="nav-link" href="/vacancies/text">–¢–µ–∫—Å—Ç</a>
                <a class="nav-link" href="/export/csv">CSV</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru –∏ SuperJob</h3>
                    </div>
                    <div class="card-body">
                        <form id="searchForm">
                            <div class="mb-3">
                                <label for="vacancy" class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="vacancy" 
                                       placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" required>
                                <div class="form-text">
                                    –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="city" class="form-label">–ì–æ—Ä–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                                <select class="form-select" id="city">
                                    <option value="">–í—Å–µ –≥–æ—Ä–æ–¥–∞</option>
                                    <option value="1">–ú–æ—Å–∫–≤–∞</option>
                                    <option value="2">–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</option>
                                    <option value="3">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</option>
                                    <option value="4">–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</option>
                                    <option value="88">–ö–∞–∑–∞–Ω—å</option>
                                    <option value="66">–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥</option>
                                    <option value="76">–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É</option>
                                    <option value="113">–°–∞–º–∞—Ä–∞</option>
                                    <option value="99">–£—Ñ–∞</option>
                                    <option value="1124">–ê–ª–º–∞—Ç—ã</option>
                                </select>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" id="searchBtn">
                                    <span id="spinner" class="spinner-border spinner-border-sm me-2" style="display: none;"></span>
                                    –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
                                </button>
                                <button type="button" class="btn btn-danger" id="clearDbBtn">
                                    <span id="clearSpinner" class="spinner-border spinner-border-sm me-2" style="display: none;"></span>
                                    üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î
                                </button>
                            </div>
                        </form>

                        <div id="results" class="mt-4" style="display: none;">
                            <div id="searchStats" class="mb-3"></div>
                            <div id="vacanciesList"></div>
                        </div>

                        <div id="errorAlert" class="alert alert-danger mt-3" style="display: none;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
document.addEventListener('DOMContentLoaded', function() {
    const searchForm = document.getElementById('searchForm');
    const vacancyInput = document.getElementById('vacancy');
    const citySelect = document.getElementById('city');
    const searchBtn = document.getElementById('searchBtn');
    const spinner = document.getElementById('spinner');
    const clearDbBtn = document.getElementById('clearDbBtn');  // –î–û–ë–ê–í–õ–ï–ù–û
    const clearSpinner = document.getElementById('clearSpinner');  // –î–û–ë–ê–í–õ–ï–ù–û
    const resultsDiv = document.getElementById('results');
    const searchStatsDiv = document.getElementById('searchStats');
    const vacanciesListDiv = document.getElementById('vacanciesList');
    const errorAlert = document.getElementById('errorAlert');

    // –î–û–ë–ê–í–õ–ï–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ß–ò–°–¢–ö–ò –ë–î
    clearDbBtn.addEventListener('click', async function() {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        const confirmMessage = `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! ‚ö†Ô∏è

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:
- –£–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
- –ù–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å
- –û—á–∏—Å—Ç–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;

        if (!confirm(confirmMessage)) {
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        clearDbBtn.disabled = true;
        clearSpinner.style.display = 'inline-block';
        clearDbBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>–û—á–∏—Å—Ç–∫–∞...';
        hideError();
        hideSuccess();

        try {
            console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

            const response = await fetch('/api/clear-db', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:', data);

            if (data.error) {
                throw new Error(data.error);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const message = data.deleted_count > 0 
                ? `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ ${data.deleted_count} –≤–∞–∫–∞–Ω—Å–∏–π.`
                : '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –±—ã–ª–∞ –ø—É—Å—Ç–∞.';
            
            showSuccess(message);
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            resultsDiv.style.display = 'none';

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î:', error);
            showError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        } finally {
            clearDbBtn.disabled = false;
            clearSpinner.style.display = 'none';
            clearDbBtn.innerHTML = 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î';
        }
    });

    // –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–†–ú–´ –ü–û–ò–°–ö–ê (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
    searchForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        const vacancy = vacancyInput.value.trim();
        const city = citySelect.value;
        
        if (!vacancy) {
            showError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        searchBtn.disabled = true;
        spinner.style.display = 'inline-block';
        hideError();
        hideSuccess();
        resultsDiv.style.display = 'none';

        try {
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–æ–¥–µ
            const cityName = getCityName(city);
            console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫:', vacancy, cityName ? `–≤ –≥–æ—Ä–æ–¥–µ: ${cityName}` : '(–≤—Å–µ –≥–æ—Ä–æ–¥–∞)');

            const response = await fetch('/api/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    vacancy: vacancy,
                    city: city
                })
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            const data = await response.json();
            console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', data);

            if (data.error) {
                throw new Error(data.error);
            }

            displayResults(data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message);
        } finally {
            searchBtn.disabled = false;
            spinner.style.display = 'none';
        }
    });

    // –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–Ø –ì–û–†–û–î–ê
    function getCityName(cityId) {
        const cities = {
            '1': '–ú–æ—Å–∫–≤–∞',
            '2': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            '3': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
            '4': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
            '88': '–ö–∞–∑–∞–Ω—å',
            '66': '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
            '76': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
            '113': '–°–∞–º–∞—Ä–∞',
            '99': '–£—Ñ–∞',
            '1124': '–ê–ª–º–∞—Ç—ã',
            '159': '–ú–∏–Ω—Å–∫',
            '40': '–¢–æ–ª—å—è—Ç—Ç–∏',
            '78': '–ë–∞—Ä–Ω–∞—É–ª',
            '54': '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
            '151': '–í–æ—Ä–æ–Ω–µ–∂',
            '19': '–ò—Ä–∫—É—Ç—Å–∫',
            '24': '–ô–æ—à–∫–∞—Ä-–û–ª–∞',
            '82': '–ö–µ–º–µ—Ä–æ–≤–æ',
            '73': '–ö–∏—Ä–æ–≤',
            '53': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
            '26': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
            '63': '–ö—É—Ä—Å–∫'
        };
        return cities[cityId] || '';
    }

    // –§–£–ù–ö–¶–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    function displayResults(data) {
        if (!data || !data.vacancies) {
            showError('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–æ–¥–µ
        let statsHtml = '<div class="row text-center mb-3">';
        
        const selectedCity = citySelect.value;
        const cityName = getCityName(selectedCity);
        const cityInfo = cityName ? ` –≤ ${cityName}` : ' (–≤—Å–µ –≥–æ—Ä–æ–¥–∞)';
        
        statsHtml += `<div class="col-md-4">
            <div class="alert alert-primary mb-0">
                <strong>${data.total}</strong><br>
                –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ${cityInfo}
            </div>
        </div>`;

        if (data.sources && data.sources.hh) {
            const hhStatus = data.sources.hh.status === 'success' ? 'success' : 'danger';
            statsHtml += `<div class="col-md-4">
                <div class="alert alert-${hhStatus} mb-0">
                    <strong>${data.sources.hh.count}</strong><br>
                    HH.ru${cityInfo}
                </div>
            </div>`;
        }

        if (data.sources && data.sources.superjob) {
            const sjStatus = data.sources.superjob.status === 'success' ? 'success' : 'danger';
            statsHtml += `<div class="col-md-4">
                <div class="alert alert-${sjStatus} mb-0">
                    <strong>${data.sources.superjob.count}</strong><br>
                    SuperJob${cityInfo}
                </div>
            </div>`;
        }

        statsHtml += '</div>';

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
        if (cityName) {
            statsHtml += `<div class="alert alert-info">
                <strong>üìç –ü–æ–∏—Å–∫ –≤ –≥–æ—Ä–æ–¥–µ:</strong> ${cityName}
                <br><small>–ß—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º, –≤—ã–±–µ—Ä–∏—Ç–µ "–í—Å–µ –≥–æ—Ä–æ–¥–∞"</small>
            </div>`;
        }

        searchStatsDiv.innerHTML = statsHtml;

        // –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        let vacanciesHtml = '';

        if (data.vacancies && data.vacancies.length > 0) {
            data.vacancies.forEach(function(vacancy, index) {
                const title = vacancy.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                const company = vacancy.company || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                const salary = vacancy.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                const location = vacancy.location || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                const link = vacancy.link || '#';
                let source = vacancy.source || 'unknown';

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ
                if (source === 'unknown' && link) {
                    if (link.includes('hh.ru')) source = 'hh';
                    else if (link.includes('superjob.ru')) source = 'superjob';
                }

                let sourceClass = 'secondary';
                let sourceName = '–ù–ï–ò–ó–í–ï–°–¢–ù–û';
                let cardClass = '';

                if (source === 'hh') {
                    sourceClass = 'success';
                    sourceName = 'HH.RU';
                    cardClass = 'source-hh';
                } else if (source === 'superjob') {
                    sourceClass = 'info';
                    sourceName = 'SUPERJOB';
                    cardClass = 'source-superjob';
                } else {
                    sourceClass = 'warning';
                    sourceName = '–ù–ï–ò–ó–í–ï–°–¢–ù–û';
                }

                vacanciesHtml += `
                    <div class="card mb-3 ${cardClass}">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center mb-2">
                                        <span class="badge bg-light text-dark me-2">#${index + 1}</span>
                                        <span class="badge bg-${sourceClass}">${sourceName}</span>
                                    </div>
                                    <h5 class="card-title">${title}</h5>
                                    <p class="card-text">
                                        <strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${company}<br>
                                        <strong>–ó–∞—Ä–ø–ª–∞—Ç–∞:</strong> ${salary}<br>
                                        <strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${location}
                                    </p>
                                </div>
                            </div>
                            <a href="${link}" target="_blank" class="btn btn-outline-primary btn-sm">
                                üîó –û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
                            </a>
                        </div>
                    </div>
                `;
            });
        } else {
            const noResultsMessage = cityName 
                ? `–í–∞–∫–∞–Ω—Å–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ ${cityName} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–í—Å–µ –≥–æ—Ä–æ–¥–∞".`
                : '–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
            vacanciesHtml = `<div class="alert alert-warning">${noResultsMessage}</div>`;
        }

        vacanciesListDiv.innerHTML = vacanciesHtml;
        resultsDiv.style.display = 'block';
        resultsDiv.scrollIntoView({ behavior: 'smooth' });
    }

    // –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ö–ê–ó–ê –£–°–ü–ï–®–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
    function showSuccess(message) {
        let successAlert = document.getElementById('successAlert');
        if (!successAlert) {
            successAlert = document.createElement('div');
            successAlert.id = 'successAlert';
            successAlert.className = 'alert alert-success mt-3';
            successAlert.style.display = 'none';
            errorAlert.parentNode.insertBefore(successAlert, errorAlert.nextSibling);
        }
        
        successAlert.innerHTML = `
            <div class="d-flex align-items-center">
                <div class="flex-grow-1">${message}</div>
                <button type="button" class="btn-close" onclick="hideSuccess()"></button>
            </div>
        `;
        successAlert.style.display = 'block';
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            hideSuccess();
        }, 8000);
        
        successAlert.scrollIntoView({ behavior: 'smooth' });
    }

    // –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ö–†–´–¢–ò–Ø –£–°–ü–ï–®–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
    window.hideSuccess = function() {
        const successAlert = document.getElementById('successAlert');
        if (successAlert) {
            successAlert.style.display = 'none';
        }
    }

    // –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ö–ê–ó–ê –û–®–ò–ë–û–ö
    function showError(message) {
        errorAlert.innerHTML = `
            <div class="d-flex align-items-center">
                <div class="flex-grow-1"><strong>‚ùå –û—à–∏–±–∫–∞:</strong> ${message}</div>
                <button type="button" class="btn-close" onclick="hideError()"></button>
            </div>
        `;
        errorAlert.style.display = 'block';
        errorAlert.scrollIntoView({ behavior: 'smooth' });
    }

    // –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ö–†–´–¢–ò–Ø –û–®–ò–ë–û–ö
    window.hideError = function() {
        errorAlert.style.display = 'none';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    fetch('/api/health')
        .then(response => response.json())
        .then(data => {
            console.log('‚úÖ API —Å—Ç–∞—Ç—É—Å:', data);
            if (data.status === 'healthy') {
                console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
            }
        })
        .catch(error => {
            console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            showError('API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
        });
});
</script>
</body>
</html>
    """
    return html


@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        'status': 'healthy',
        'version': '2.0.0',
        'message': 'Job Parser System API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'parsers': ['hh', 'superjob']
    })


@app.route('/api/search', methods=['POST'])
def search_vacancies():
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"""
    try:
        data = request.json
        query = data.get('vacancy', '').strip()
        city = data.get('city', '')

        if not query:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'}), 400

        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {query}")

        results = {
            'query': query,
            'vacancies': [],
            'sources': {
                'hh': {'count': 0, 'status': 'pending'},
                'superjob': {'count': 0, 'status': 'pending'}
            },
            'total': 0
        }

        # –ü–æ–∏—Å–∫ –Ω–∞ HH.ru
        try:
            print("üìä –ü–∞—Ä—Å–∏–Ω–≥ HH.ru...")
            hh_vacancies = hh_parser.search(query, limit=50, city=city)
            results['vacancies'].extend(hh_vacancies)
            results['sources']['hh'] = {
                'count': len(hh_vacancies),
                'status': 'success'
            }
            print(f"‚úÖ HH.ru: {len(hh_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ HH.ru: {e}")
            results['sources']['hh'] = {
                'count': 0,
                'status': 'error',
                'error': str(e)
            }

        # –ü–æ–∏—Å–∫ –Ω–∞ SuperJob
        try:
            print("üìä –ü–∞—Ä—Å–∏–Ω–≥ SuperJob...")
            sj_vacancies = sj_parser.search(query, limit=50,city=city)
            results['vacancies'].extend(sj_vacancies)
            results['sources']['superjob'] = {
                'count': len(sj_vacancies),
                'status': 'success'
            }
            print(f"‚úÖ SuperJob: {len(sj_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ SuperJob: {e}")
            results['sources']['superjob'] = {
                'count': 0,
                'status': 'error',
                'error': str(e)
            }

        results['total'] = len(results['vacancies'])
        print(f"üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ: {results['total']} –≤–∞–∫–∞–Ω—Å–∏–π")

        return jsonify(results)

    except Exception as e:
        print('üí• –û—à–∏–±–∫–∞ –≤ search_vacancies:', traceback.format_exc())
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {str(e)}'}), 500


@app.route('/api/vacancies', methods=['GET'])
def get_all_vacancies():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()

        result = {
            'vacancies': [],
            'total': len(vacancies)
        }

        for v in vacancies:
            result['vacancies'].append({
                'id': v.id,
                'title': v.title,
                'link': v.link,
                'company': v.company,
                'salary': v.salary,
                'source': v.source
            })

        session.close()
        return jsonify(result)

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/vacancies/text')
def vacancies_text():
    """–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()

        text_data = export_utils.to_text(vacancies)
        session.close()

        return f'<pre style="font-family: monospace; white-space: pre-wrap; padding: 20px;">{text_data}</pre>'

    except Exception as e:
        return f'<pre>–û—à–∏–±–∫–∞: {str(e)}</pre>'


@app.route('/export/csv')
def export_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ CSV"""
    try:
        session = Session()
        vacancies = session.query(Vacancy).all()
        csv_data = export_utils.to_csv(vacancies)
        session.close()

        return Response(
            csv_data,
            mimetype='text/csv; charset=utf-8',
            headers={'Content-Disposition': 'attachment;filename=vacancies.csv'}
        )

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/clear-db', methods=['DELETE'])
def clear_database():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    try:
        session = Session()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        count_before = session.query(Vacancy).count()

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        deleted_count = session.query(Vacancy).delete()
        session.commit()

        print(f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –≤–∞–∫–∞–Ω—Å–∏–π")

        session.close()

        return jsonify({
            'success': True,
            'message': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞',
            'deleted_count': deleted_count,
            'count_before': count_before
        })

    except Exception as e:
        print(f'üí• –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {str(e)}')
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}'
        }), 500


@app.route('/api/db-stats', methods=['GET'])
def get_db_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        session = Session()

        total_count = session.query(Vacancy).count()
        hh_count = session.query(Vacancy).filter_by(source='hh').count()
        sj_count = session.query(Vacancy).filter_by(source='superjob').count()

        session.close()

        return jsonify({
            'total_vacancies': total_count,
            'hh_vacancies': hh_count,
            'superjob_vacancies': sj_count
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üåê –ì–ª–∞–≤–Ω–∞—è: http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=True)
