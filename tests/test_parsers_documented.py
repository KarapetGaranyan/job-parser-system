#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –∏ –∑–∞—á–µ–º —ç—Ç–æ –≤–∞–∂–Ω–æ
"""

import sys
import os
import subprocess
import time
from pathlib import Path


# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    PURPLE = '\033[95m'
    BOLD = '\033[1m'
    END = '\033[0m'


def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º"""
    print(f"{Colors.CYAN}{Colors.BOLD}")
    print("=" * 80)
    print("üß™ UNIT –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ü–û–î–†–û–ë–ù–´–ú–ò –û–ë–™–Ø–°–ù–ï–ù–ò–Ø–ú–ò")
    print("üìö –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –æ–±—ä—è—Å–Ω—è–µ—Ç –ß–¢–û –∏ –ó–ê–ß–ï–ú –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç")
    print("=" * 80)
    print(f"{Colors.END}")


def print_test_categories():
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤"""
    print(f"{Colors.BLUE}{Colors.BOLD}üìã –ß–¢–û –ë–£–î–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–¢–¨–°–Ø:{Colors.END}")
    print()

    categories = [
        ("üèóÔ∏è –ë–ê–ó–û–í–´–ô –ü–ê–†–°–ï–†", "–û—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å",
         "–ö—Ä–∏—Ç–∏—á–Ω–æ: –µ—Å–ª–∏ —Å–ª–æ–º–∞–µ—Ç—Å—è, –≤—Å—è —Å–∏—Å—Ç–µ–º–∞ —É–ø–∞–¥–µ—Ç"),
        ("üîç HH.RU –ü–ê–†–°–ï–†", "–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ HeadHunter.ru", "–í–∞–∂–Ω–æ: –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–π"),
        ("üîß SUPERJOB –ü–ê–†–°–ï–†", "–†–∞–±–æ—Ç–∞ —Å API SuperJob", "–í–∞–∂–Ω–æ: –≤—Ç–æ—Ä–æ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫"),
        ("üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø", "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤", "–í–∞–∂–Ω–æ: –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"),
        ("üìÅ –°–¢–†–£–ö–¢–£–†–ê", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞", "–ö—Ä–∏—Ç–∏—á–Ω–æ: –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è"),
    ]

    for emoji_name, description, importance in categories:
        print(f"  {emoji_name}")
        print(f"    üìù –ß—Ç–æ: {description}")
        print(f"    ‚ö° {importance}")
        print()

    print(f"{Colors.YELLOW}üí° –í –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ:{Colors.END}")
    print("  üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º - —Ü–µ–ª—å —Ç–µ—Å—Ç–∞")
    print("  üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º - –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è")
    print("  üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ - –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã")
    print("  üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    print("  ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å")
    print()


def print_test_aspects():
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–æ–≤ Unit —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"{Colors.PURPLE}{Colors.BOLD}üéØ –ê–°–ü–ï–ö–¢–´ UNIT –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:{Colors.END}")
    print()

    aspects = [
        ("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"),
        ("üîç –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"),
        ("üìä –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"),
        ("üîí –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"),
        ("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", "Graceful –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ–µ–≤ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"),
        ("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤", "–ù–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"),
        ("üé≠ –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"),
        ("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ü—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"),
        ("üîß –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ HTML/JSON"),
        ("üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –º–æ–¥—É–ª–µ–π"),
    ]

    for aspect, description in aspects:
        print(f"  {aspect} - {description}")
    print()


def run_explained_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    test_file = Path(__file__).parent / "test_parsers_documented.py"

    if not test_file.exists():
        print(f"{Colors.RED}‚ùå –§–∞–π–ª —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}{Colors.END}")
        return False

    print(f"{Colors.BLUE}üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏...{Colors.END}")
    print(f"üìÅ –§–∞–π–ª: {test_file}")
    print()

    # –ö–æ–º–∞–Ω–¥–∞ pytest —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö print'–æ–≤
    cmd = [
        sys.executable, "-m", "pytest",
        str(test_file),
        "-v",  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        "-s",  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å print() –∏–∑ —Ç–µ—Å—Ç–æ–≤
        "--tb=short",  # –ö–æ—Ä–æ—Ç–∫–∏–π traceback
        "--color=yes",  # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
        "--capture=no",  # –ù–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—ã–≤–æ–¥
        "--durations=10",  # 10 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    ]

    try:
        print(f"{Colors.CYAN}‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)...{Colors.END}")
        print("=" * 80)

        # –ó–∞–ø—É—Å–∫–∞–µ–º pytest
        result = subprocess.run(cmd, capture_output=False, text=True)

        print("=" * 80)
        return result.returncode == 0

    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}{Colors.END}")
        return False


def generate_summary_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print(f"\n{Colors.BOLD}üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò{Colors.END}")
    print("=" * 60)

    print(f"{Colors.GREEN}‚úÖ –ß–¢–û –ë–´–õ–û –ü–†–û–í–ï–†–ï–ù–û:{Colors.END}")
    print("  üèóÔ∏è –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤")
    print("  üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    print("  üìä –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("  üîí –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("  ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫")
    print("  üîÑ –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤")
    print("  üé≠ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
    print("  ‚ö° –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print("  üîß –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –∏ JSON")
    print("  üèóÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    print(f"\n{Colors.BLUE}üí° –ó–ê–ß–ï–ú –≠–¢–û –í–ê–ñ–ù–û:{Colors.END}")
    print("  üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤ –≤ production")
    print("  üîß –£–ø—Ä–æ—â–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    print("  üìà –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
    print("  üöÄ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ")
    print("  üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

    print(f"\n{Colors.YELLOW}üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Colors.END}")
    print("  üìÖ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∫–æ–º–º–∏—Ç–æ–º")
    print("  üîÑ –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞")
    print("  üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞ (>90%)")
    print("  üêõ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–∞–≥–∞")
    print("  üìö –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã")


def print_useful_commands():
    """–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\n{Colors.CYAN}üíª –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:{Colors.END}")
    print()

    commands = [
        ("üöÄ –í—Å–µ —Ç–µ—Å—Ç—ã —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏", "python run_explained_tests.py"),
        ("‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã", "python test_parsers_documented.py --quick"),
        ("üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "python test_parsers_documented.py --category hh"),
        ("üìä –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞", "python test_parsers_documented.py --coverage"),
        ("üîç –û–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç", "pytest test_parsers_documented.py::TestBaseParser::test_init_correct_values -v -s"),
        ("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤", "pytest test_parsers_documented.py --collect-only"),
        ("üêõ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ", "pytest test_parsers_documented.py -x -v -s"),
        ("üìà HTML –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è", "pytest --cov=parsers --cov-report=html"),
    ]

    for description, command in commands:
        print(f"  {description}:")
        print(f"    {Colors.YELLOW}{command}{Colors.END}")
        print()


def interactive_test_menu():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    print(f"{Colors.BOLD}üéõÔ∏è –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –ú–ï–ù–Æ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø{Colors.END}")
    print()

    options = [
        ("1", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏", "explained"),
        ("2", "‚ö° –ë—ã—Å—Ç—Ä—ã–µ smoke —Ç–µ—Å—Ç—ã", "quick"),
        ("3", "üèóÔ∏è –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞", "base"),
        ("4", "üîç –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã HH –ø–∞—Ä—Å–µ—Ä–∞", "hh"),
        ("5", "üîß –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã SuperJob –ø–∞—Ä—Å–µ—Ä–∞", "superjob"),
        ("6", "‚ùå –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫", "errors"),
        ("7", "‚ö° –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "performance"),
        ("8", "üîß –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö", "parsing"),
        ("9", "üìä –ó–∞–ø—É—Å–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞", "coverage"),
        ("0", "‚ùå –í—ã—Ö–æ–¥", "exit"),
    ]

    for key, description, _ in options:
        print(f"  {key}. {description}")

    print()
    choice = input(f"{Colors.CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-9): {Colors.END}").strip()

    # –ù–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
    selected = None
    for key, _, action in options:
        if key == choice:
            selected = action
            break

    return selected


def run_interactive_mode():
    """–ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    while True:
        choice = interactive_test_menu()

        if choice == "exit":
            print(f"{Colors.YELLOW}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.END}")
            break
        elif choice == "explained":
            success = run_explained_tests()
        elif choice == "quick":
            success = run_category_tests("quick")
        elif choice in ["base", "hh", "superjob", "errors", "performance", "parsing"]:
            success = run_category_tests(choice)
        elif choice == "coverage":
            success = run_with_coverage()
        else:
            print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")
            continue

        if success:
            print(f"\n{Colors.GREEN}‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!{Colors.END}")
        else:
            print(f"\n{Colors.RED}‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö.{Colors.END}")

        print(f"\n{Colors.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.END}")
        input()
        print("\n" + "=" * 80 + "\n")


def run_category_tests(category):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if category == "quick":
        test_file = Path(__file__).parent / "test_quick.py"
        cmd = [sys.executable, "-m", "pytest", str(test_file), "-v", "-s"]
    else:
        test_file = Path(__file__).parent / "test_parsers_documented.py"

        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–ª–∞—Å—Å–æ–≤
        class_patterns = {
            'base': 'TestBaseParser',
            'hh': 'TestHHParser',
            'superjob': 'TestSuperJobParser',
            'errors': '*error*',
            'performance': '*performance*',
            'parsing': '*parse*'
        }

        pattern = class_patterns.get(category, category)
        cmd = [
            sys.executable, "-m", "pytest",
            str(test_file),
            "-k", pattern,
            "-v", "-s",
            "--tb=short"
        ]

    try:
        result = subprocess.run(cmd, capture_output=False, text=True)
        return result.returncode == 0
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")
        return False


def run_with_coverage():
    """–ó–∞–ø—É—Å–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"""
    test_file = Path(__file__).parent / "test_parsers_documented.py"
    project_root = Path(__file__).parent.parent

    cmd = [
        sys.executable, "-m", "pytest",
        str(test_file),
        f"--cov={project_root / 'parsers'}",
        "--cov-report=term-missing",
        "--cov-report=html:htmlcov",
        "-v",
        "--tb=short"
    ]

    try:
        result = subprocess.run(cmd, capture_output=False, text=True)

        if result.returncode == 0:
            print(f"\n{Colors.GREEN}üìä HTML –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: htmlcov/index.html{Colors.END}")

        return result.returncode == 0
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")
        return False


# –î–æ–±–∞–≤–∏—Ç—å –≤ test_parsers_documented.py:

def test_malicious_input_handling(self, test_parser):
    """
    üîí –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞

    üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ó–∞—â–∏—Ç—É –æ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–¥–∞–µ–º SQL –∏–Ω—ä–µ–∫—Ü–∏–∏, XSS, –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫ —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: SQL –∏–Ω—ä–µ–∫—Ü–∏–∏, XSS –∞—Ç–∞–∫–∏, DoS
    ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –î–∞–Ω–Ω—ã–µ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É—é—Ç—Å—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è
    """
    malicious_inputs = [
        "'; DROP TABLE vacancies; --",
        "<script>alert('xss')</script>",
        'A' * 10000,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        'javascript:alert("xss")'
    ]

    for malicious_input in malicious_inputs:
        vacancy_data = {
            'title': malicious_input,
            'link': 'https://example.com/job/1',
            'company': 'Test Company',
            'salary': '100k'
        }

        # –î–æ–ª–∂–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è
        result = test_parser.save_vacancy(vacancy_data)
        assert isinstance(result, bool)
        print(f"    ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {malicious_input[:20]}...")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(
        description='–ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üéØ –¶–ï–õ–¨ –≠–¢–û–ì–û –°–ö–†–ò–ü–¢–ê:
–ü–æ–∫–∞–∑–∞—Ç—å –ß–¢–û –∏–º–µ–Ω–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –∏ –ó–ê–ß–ï–ú —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã.
–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.

üìö –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
  python run_explained_tests.py              # –í—Å–µ —Ç–µ—Å—Ç—ã —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
  python run_explained_tests.py --interactive # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
  python run_explained_tests.py --category hh # –¢–æ–ª—å–∫–æ HH –ø–∞—Ä—Å–µ—Ä
  python run_explained_tests.py --quick       # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã

üîç –ß–¢–û –í–´ –£–í–ò–î–ò–¢–ï –í –ö–ê–ñ–î–û–ú –¢–ï–°–¢–ï:
  üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º - —Ü–µ–ª—å —Ç–µ—Å—Ç–∞
  üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º - –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è
  üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ - –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã  
  üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
        """
    )

    parser.add_argument('--interactive', '-i', action='store_true',
                        help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤')
    parser.add_argument('--category', '-c',
                        choices=['base', 'hh', 'superjob', 'errors', 'performance', 'parsing'],
                        help='–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤')
    parser.add_argument('--quick', '-q', action='store_true',
                        help='–ë—ã—Å—Ç—Ä—ã–µ smoke —Ç–µ—Å—Ç—ã')
    parser.add_argument('--coverage', action='store_true',
                        help='–ó–∞–ø—É—Å–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞')

    args = parser.parse_args()

    print_header()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pytest
    try:
        import pytest
        print(f"{Colors.GREEN}‚úÖ pytest –¥–æ—Å—Ç—É–ø–µ–Ω (–≤–µ—Ä—Å–∏—è {pytest.__version__}){Colors.END}\n")
    except ImportError:
        print(f"{Colors.RED}‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest{Colors.END}")
        return 1

    if not args.interactive:
        print_test_categories()
        print_test_aspects()

    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.interactive:
        run_interactive_mode()
        return 0
    elif args.quick:
        success = run_category_tests("quick")
    elif args.category:
        success = run_category_tests(args.category)
    elif args.coverage:
        success = run_with_coverage()
    else:
        success = run_explained_tests()

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 80)
    if success:
        print(f"{Colors.GREEN}{Colors.BOLD}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ{Colors.END}")
        generate_summary_report()
        return_code = 0
    else:
        print(f"{Colors.RED}{Colors.BOLD}‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–• ‚ùå{Colors.END}")
        print(f"{Colors.YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π{Colors.END}")
        return_code = 1

    print("=" * 80)
    print_useful_commands()

    return return_code


if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.END}")
        import traceback

        traceback.print_exc()
        sys.exit(1)