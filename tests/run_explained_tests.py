#!/usr/bin/env python3
"""
Unit —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ –∏ –∑–∞—á–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
"""

import pytest
from unittest.mock import Mock, patch
import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from parsers.base_parser import BaseParser
    from parsers.hh_parser import HHParser
    from parsers.superjob_parser import SuperJobParser
except ImportError as e:
    pytest.skip(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤: {e}", allow_module_level=True)


# ========== –§–ò–ö–°–¢–£–†–´ ==========

@pytest.fixture
def test_parser():
    """
    üèóÔ∏è –§–ò–ö–°–¢–£–†–ê: –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä

    –ó–∞—á–µ–º –Ω—É–∂–Ω–∞: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ BaseParser
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    """

    class TestParser(BaseParser):
        def search(self, query, limit=20, city=''):
            return []

    return TestParser('test_source')


@pytest.fixture
def hh_parser():
    """
    üèóÔ∏è –§–ò–ö–°–¢–£–†–ê: –°–æ–∑–¥–∞–µ—Ç HH –ø–∞—Ä—Å–µ—Ä

    –ó–∞—á–µ–º –Ω—É–∂–Ω–∞: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ HH.ru –ø–∞—Ä—Å–µ—Ä–∞
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä HHParser
    """
    return HHParser()


@pytest.fixture
def superjob_parser():
    """
    üèóÔ∏è –§–ò–ö–°–¢–£–†–ê: –°–æ–∑–¥–∞–µ—Ç SuperJob –ø–∞—Ä—Å–µ—Ä

    –ó–∞—á–µ–º –Ω—É–∂–Ω–∞: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ SuperJob –ø–∞—Ä—Å–µ—Ä–∞
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SuperJobParser
    """
    return SuperJobParser()


@pytest.fixture
def sample_vacancy_data():
    """
    üìã –§–ò–ö–°–¢–£–†–ê: –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏

    –ó–∞—á–µ–º –Ω—É–∂–Ω–∞: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
    –ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç: –¢–∏–ø–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏
    """
    return {
        'title': 'Python Developer',
        'link': 'https://example.com/job/1',
        'company': 'Test Company',
        'salary': '100000 —Ä—É–±.'
    }


# ========== –¢–ï–°–¢–´ –ë–ê–ó–û–í–û–ì–û –ü–ê–†–°–ï–†–ê ==========

class TestBaseParser:
    """
    üß™ –ö–ê–¢–ï–ì–û–†–ò–Ø: –¢–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞

    –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º: –û—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ BaseParser
    –ó–∞—á–µ–º –≤–∞–∂–Ω–æ: BaseParser - –æ—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤, –æ—Ç –Ω–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –≤—Å—è —Å–∏—Å—Ç–µ–º–∞
    """

    def test_init_correct_values(self, test_parser):
        """
        ‚úÖ –¢–ï–°–¢: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ï—Å–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—Å—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
        """
        assert test_parser.source_name == 'test_source'
        assert test_parser is not None
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –∏–º–µ–Ω–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞")

    def test_source_name_assignment(self):
        """
        ‚úÖ –¢–ï–°–¢: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –†–∞–∑–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –í —Å–∏—Å—Ç–µ–º–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä—Å–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ü–∞—Ä—Å–µ—Ä—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        """

        class TestParser(BaseParser):
            def search(self, query, limit=20, city=''):
                return []

        parser1 = TestParser('source1')
        parser2 = TestParser('source2')

        assert parser1.source_name == 'source1'
        assert parser2.source_name == 'source2'
        assert parser1.source_name != parser2.source_name
        print("    ‚úÖ –†–∞–∑–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞")

    # ========== –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò ==========

    def test_empty_source_name(self):
        """
        üîç –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –∫–∞–∫ –∏–º–µ–Ω–µ–º
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """

        class TestParser(BaseParser):
            def search(self, query, limit=20, city=''):
                return []

        parser = TestParser('')
        assert parser.source_name == ''
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç–æ–µ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞")

    def test_none_source_name(self):
        """
        üîç –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ None –∫–∞–∫ –∏–º–µ–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å None –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å None
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ None
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: TypeError –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–∞—Ö —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–º–µ–Ω–µ–º
        """

        class TestParser(BaseParser):
            def search(self, query, limit=20, city=''):
                return []

        parser = TestParser(None)
        assert parser.source_name is None
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç None –∫–∞–∫ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞")

    def test_long_source_name(self):
        """
        üîç –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –∏–º–µ–Ω–µ–º –≤ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –¥–ª–∏–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–∞—Ö
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é –∏–ª–∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        """

        class TestParser(BaseParser):
            def search(self, query, limit=20, city=''):
                return []

        long_name = 'a' * 1000
        parser = TestParser(long_name)
        assert parser.source_name == long_name
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

    def test_special_characters_source_name(self):
        """
        üîç –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏ -, _, —á–∏—Å–ª–∞–º–∏, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –∏–º–µ–Ω–µ–º "test-parser_123!@#"
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –†–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∏–ª–∏ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
        """

        class TestParser(BaseParser):
            def search(self, query, limit=20, city=''):
                return []

        special_name = "test-parser_123!@#"
        parser = TestParser(special_name)
        assert parser.source_name == special_name
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏")

    # ========== –¢–ò–ü–´ –î–ê–ù–ù–´–• ==========

    def test_numeric_source_name(self):
        """
        üìä –¢–ï–°–¢: –ß–∏—Å–ª–æ–≤–æ–µ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–∞—Ä—Å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ 123 –∫–∞–∫ –∏–º—è
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ì–∏–±–∫–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É
        """

        class TestParser(BaseParser):
            def search(self, query, limit=20, city=''):
                return []

        parser = TestParser(123)
        assert parser.source_name == 123
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∏–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

    def test_search_returns_list(self, test_parser):
        """
        üìä –¢–ï–°–¢: –ú–µ—Ç–æ–¥ search –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ search
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –í—ã–∑—ã–≤–∞–µ–º search() –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ API - –≤—Å–µ–≥–¥–∞ –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω–µ—Ç None –∏–ª–∏ —Å—Ç—Ä–æ–∫—É, —Å–∏—Å—Ç–µ–º–∞ —É–ø–∞–¥–µ—Ç
        """
        result = test_parser.search('test')
        assert isinstance(result, list)
        print("    ‚úÖ –ú–µ—Ç–æ–¥ search –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π)")

    @patch('database.models.Session')
    @patch('database.models.Vacancy')
    def test_save_vacancy_returns_boolean(self, mock_vacancy, mock_session, test_parser, sample_vacancy_data):
        """
        üìä –¢–ï–°–¢: –ú–µ—Ç–æ–¥ save_vacancy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ save_vacancy
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: API –¥–æ–ª–∂–Ω–æ —á–µ—Ç–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É, –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–ª–æ–º–∞–µ—Ç—Å—è
        """
        result = test_parser.save_vacancy(sample_vacancy_data)
        assert isinstance(result, bool)
        print("    ‚úÖ –ú–µ—Ç–æ–¥ save_vacancy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean (True/False)")

    # ========== –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í ==========

    @patch('database.models.Session')
    @patch('database.models.Vacancy')
    def test_save_vacancy_empty_dict(self, mock_vacancy, mock_session, test_parser):
        """
        üîí –¢–ï–°–¢: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å {} –≤ save_vacancy
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: KeyError –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—è–º
        """
        result = test_parser.save_vacancy({})
        assert isinstance(result, bool)
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")

    def test_save_vacancy_none_input(self, test_parser):
        """
        üîí –¢–ï–°–¢: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ None –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫–∞ None –∫–∞–∫ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–µ—Ä–µ–¥–∞–µ–º None –≤ save_vacancy
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ None
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: AttributeError –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º None
        """
        try:
            result = test_parser.save_vacancy(None)
            assert isinstance(result, bool)
            print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç None (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool)")
        except (TypeError, AttributeError, KeyError):
            print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è None")

    # ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========

    @patch('database.models.Session')
    @patch('database.models.Vacancy')
    def test_save_vacancy_database_error(self, mock_vacancy, mock_session, test_parser, sample_vacancy_data):
        """
        ‚ùå –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–±–æ–µ–≤ –ë–î
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ë–î –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫–∏
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –í—Å—è —Å–∏—Å—Ç–µ–º–∞ —É–ø–∞–¥–µ—Ç –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ë–î
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False –∏ –Ω–µ —É–ø–∞—Å—Ç—å
        """
        mock_session_instance = Mock()
        mock_session.return_value = mock_session_instance
        mock_session_instance.query.side_effect = Exception("Database error")

        result = test_parser.save_vacancy(sample_vacancy_data)

        assert result is False
        mock_session_instance.rollback.assert_called_once()
        mock_session_instance.close.assert_called_once()
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ë–î (rollback + close)")

    def test_save_vacancy_import_error(self, test_parser, sample_vacancy_data):
        """
        ‚ùå –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–æ–¥—É–ª–µ–π –ë–î

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –†–∞–±–æ—Ç—É –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º ImportError –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ database.models
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ú–æ–¥—É–ª–∏ –ë–î –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: ImportError —É–±—å–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ë–î (—Ç–µ—Å—Ç—ã, –¥–µ–º–æ)
        """
        with patch('builtins.__import__', side_effect=ImportError("Module not found")):
            result = test_parser.save_vacancy(sample_vacancy_data)
            assert result is True  # Graceful degradation –±–µ–∑ –ë–î
        print("    ‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –º–æ–¥—É–ª–µ–π –ë–î (graceful degradation)")

    # ========== –°–û–°–¢–û–Ø–ù–ò–ï –û–ë–™–ï–ö–¢–ê ==========

    def test_object_state_immutability(self, test_parser):
        """
        üîÑ –¢–ï–°–¢: –ù–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –°–æ—Ö—Ä–∞–Ω—è–µ–º source_name, –≤—ã–∑—ã–≤–∞–µ–º search, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ü–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å stateless –¥–ª—è thread-safety
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, —á—Ç–æ —Å–ª–æ–º–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: source_name –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
        """
        original_source = test_parser.source_name
        test_parser.search('test query')
        assert test_parser.source_name == original_source
        print("    ‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞")

    def test_multiple_instances_independence(self):
        """
        üîÑ –¢–ï–°–¢: –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –†–∞–∑–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–µ –≤–ª–∏—è—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –í —Å–∏—Å—Ç–µ–º–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä—Å–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å shared –º–µ–∂–¥—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ö–∞–∂–¥—ã–π –ø–∞—Ä—Å–µ—Ä –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """

        class TestParser(BaseParser):
            def search(self, query, limit=20, city=''):
                return []

        parser1 = TestParser('parser1')
        parser2 = TestParser('parser2')

        assert parser1.source_name != parser2.source_name
        assert parser1 is not parser2
        print("    ‚úÖ –†–∞–∑–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞")

    # ========== –ü–û–ë–û–ß–ù–´–ï –≠–§–§–ï–ö–¢–´ ==========

    @patch('database.models.Session')
    @patch('database.models.Vacancy')
    def test_save_vacancy_side_effects(self, mock_vacancy, mock_session, test_parser, sample_vacancy_data):
        """
        üé≠ –¢–ï–°–¢: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã add -> commit -> close
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: add() -> commit() -> close() –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        """
        mock_session_instance = Mock()
        mock_session.return_value = mock_session_instance
        mock_session_instance.query.return_value.filter_by.return_value.first.return_value = None

        result = test_parser.save_vacancy(sample_vacancy_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤
        mock_session_instance.add.assert_called_once()
        mock_session_instance.commit.assert_called_once()
        mock_session_instance.close.assert_called_once()
        assert result is True
        print("    ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –ë–î")

    @patch('database.models.Session')
    @patch('database.models.Vacancy')
    def test_save_vacancy_duplicate_no_side_effects(self, mock_vacancy, mock_session, test_parser, sample_vacancy_data):
        """
        üé≠ –¢–ï–°–¢: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ add/commit
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞—Å–æ—Ä—è—Ç—å –ë–î
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –õ–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ù–ï –≤—ã–∑—ã–≤–∞—é—Ç—Å—è add() –∏ commit(), —Ç–æ–ª—å–∫–æ close()
        """
        mock_session_instance = Mock()
        mock_session.return_value = mock_session_instance
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        mock_session_instance.query.return_value.filter_by.return_value.first.return_value = Mock()

        result = test_parser.save_vacancy(sample_vacancy_data)

        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ
        mock_session_instance.add.assert_not_called()
        mock_session_instance.commit.assert_not_called()
        mock_session_instance.close.assert_called_once()
        assert result is False
        print("    ‚úÖ –ü—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–∏—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏")

    # ========== –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ==========

    @patch('database.models.Session')
    @patch('database.models.Vacancy')
    def test_save_vacancy_performance(self, mock_vacancy, mock_session, test_parser, sample_vacancy_data):
        """
        ‚ö° –¢–ï–°–¢: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ –∏ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ save_vacancy
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –¢–æ—Ä–º–æ–∑–∞ –≤ –ë–î –º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–µ—é–∑–∞–±–µ–ª—å–Ω–æ–π
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (<0.1 —Å–µ–∫ –¥–ª—è –º–æ–∫–∞)
        """
        start_time = time.time()
        test_parser.save_vacancy(sample_vacancy_data)
        end_time = time.time()

        # –î–ª—è –º–æ–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
        execution_time = end_time - start_time
        assert execution_time < 0.1
        print(f"    ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ ({execution_time:.4f} —Å–µ–∫)")


# ========== –¢–ï–°–¢–´ HH –ü–ê–†–°–ï–†–ê ==========

class TestHHParser:
    """
    üß™ –ö–ê–¢–ï–ì–û–†–ò–Ø: –¢–µ—Å—Ç—ã HH.ru –ø–∞—Ä—Å–µ—Ä–∞

    –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º: –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ HH.ru
    –ó–∞—á–µ–º –≤–∞–∂–Ω–æ: HH.ru - –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–π, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    """

    def test_init_correct_values(self, hh_parser):
        """
        ‚úÖ –¢–ï–°–¢: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HH –ø–∞—Ä—Å–µ—Ä–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HH –ø–∞—Ä—Å–µ—Ä–∞
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü—Ä–æ–≤–µ—Ä—è–µ–º source_name, base_url, –Ω–∞–ª–∏—á–∏–µ User-Agent
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ HH.ru
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ User-Agent -> –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL -> 404
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: source_name='hh', –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL, –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        """
        assert hh_parser.source_name == 'hh'
        assert hh_parser.base_url == 'https://hh.ru'
        assert 'User-Agent' in hh_parser.headers
        assert isinstance(hh_parser.headers['User-Agent'], str)
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

    # ========== –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò ==========

    @patch('requests.get')
    def test_search_empty_query(self, mock_get, hh_parser):
        """
        üîç –¢–ï–°–¢: –ü–æ–∏—Å–∫ —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ search()
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: HTTP –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ HH.ru
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –Ω–µ –ø–∞–¥–∞–µ—Ç
        """
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = '<html><body></body></html>'
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response

        with patch.object(hh_parser, 'save_vacancy', return_value=True):
            result = hh_parser.search('')
            assert isinstance(result, list)
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")

    @patch('requests.get')
    def test_search_zero_limit(self, mock_get, hh_parser):
        """
        üîç –¢–ï–°–¢: –ü–æ–∏—Å–∫ —Å –Ω—É–ª–µ–≤—ã–º –ª–∏–º–∏—Ç–æ–º

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫—É –ª–∏–º–∏—Ç–∞ = 0
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–µ—Ä–µ–¥–∞–µ–º limit=0 –≤ search()
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∏–ª–∏ –æ—à–∏–±–∫–∞ API
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = '<html><body></body></html>'
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response

        with patch.object(hh_parser, 'save_vacancy', return_value=True):
            result = hh_parser.search('Python', limit=0)
            assert isinstance(result, list)
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω—É–ª–µ–≤–æ–π –ª–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    @patch('requests.get')
    def test_search_large_limit(self, mock_get, hh_parser):
        """
        üîç –¢–ï–°–¢: –ü–æ–∏—Å–∫ —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫—É –∞–Ω–æ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–æ–≥–æ –ª–∏–º–∏—Ç–∞
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–µ—Ä–µ–¥–∞–µ–º limit=1000 –≤ search()
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ HH.ru
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ IP, —Ç–∞–π–º–∞—É—Ç—ã, –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        """
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = '<html><body></body></html>'
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response

        with patch.object(hh_parser, 'save_vacancy', return_value=True):
            result = hh_parser.search('Python', limit=1000)
            assert isinstance(result, list)
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –ª–∏–º–∏—Ç—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏)")

    # ========== –¢–ò–ü–´ –î–ê–ù–ù–´–• ==========

    @patch('requests.get')
    def test_search_numeric_query(self, mock_get, hh_parser):
        """
        üìä –¢–ï–°–¢: –ü–æ–∏—Å–∫ —Å —á–∏—Å–ª–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫—É —á–∏—Å–ª–∞ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ 12345 –≤ search()
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ ID –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–º –∫–æ–¥–∞–º
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: TypeError –ø—Ä–∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å —Å—Ç—Ä–æ–∫–∞–º–∏
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –∏ –∏—â–µ—Ç
        """
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = '<html><body></body></html>'
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response

        with patch.object(hh_parser, 'save_vacancy', return_value=True):
            result = hh_parser.search(12345)
            assert isinstance(result, list)
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")

    # ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========

    @patch('requests.get')
    def test_search_network_error(self, mock_get, hh_parser):
        """
        ‚ùå –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ç—å—é
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º RequestException –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –í—Å—è —Å–∏—Å—Ç–µ–º–∞ —É–ø–∞–¥–µ—Ç –ø—Ä–∏ –æ–±—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
        """
        import requests
        mock_get.side_effect = requests.RequestException("Network error")

        result = hh_parser.search('Python')
        assert result == []
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ (graceful degradation)")

    @patch('requests.get')
    def test_search_http_error(self, mock_get, hh_parser):
        """
        ‚ùå –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ HTTP –æ—à–∏–±–∫–∞—Ö (404, 500, etc)
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º HTTPError –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: HH.ru –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: HTTPError —É–±—å–µ—Ç –ø–æ—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
        """
        import requests
        mock_response = Mock()
        mock_response.raise_for_status.side_effect = requests.HTTPError("404 Not Found")
        mock_get.return_value = mock_response

        result = hh_parser.search('Python')
        assert result == []
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –æ—à–∏–±–∫–∏ (404, 500, etc)")

    # ========== –ü–ê–†–°–ò–ù–ì HTML ==========

    def test_parse_vacancy_item_complete(self, hh_parser):
        """
        üîß –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ HTML

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTML –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ HH.ru —Å–ª–æ–º–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í—Å–µ –ø–æ–ª—è –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        """
        bs4 = pytest.importorskip("bs4", reason="BeautifulSoup –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML")

        html = '''
        <div data-qa="vacancy-serp__vacancy">
            <a data-qa="serp-item__title" href="/vacancy/12345">Python Developer</a>
            <a data-qa="vacancy-serp__vacancy-employer">–Ø–Ω–¥–µ–∫—Å</a>
            <span data-qa="vacancy-serp__vacancy-compensation">–æ—Ç 200 000 —Ä—É–±.</span>
        </div>
        '''

        soup = bs4.BeautifulSoup(html, 'html.parser')
        item = soup.find('div')

        result = hh_parser._parse_vacancy_item(item)

        assert result is not None
        assert isinstance(result, dict)
        assert result['title'] == 'Python Developer'
        assert result['company'] == '–Ø–Ω–¥–µ–∫—Å'
        assert result['salary'] == '–æ—Ç 200 000 —Ä—É–±.'
        assert result['source'] == 'hh'
        assert '12345' in result['link']
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML –≤–∞–∫–∞–Ω—Å–∏–∏")

    def test_parse_vacancy_item_missing_fields(self, hh_parser):
        """
        üîß –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–ø–æ–ª–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ HTML

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫—É HTML —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–¥–∞–µ–º HTML –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: HTML –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: KeyError –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        bs4 = pytest.importorskip("bs4", reason="BeautifulSoup –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML")

        # HTML –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–≥–æ –ø–æ–ª—è
        html_no_title = '''
        <div data-qa="vacancy-serp__vacancy">
            <a data-qa="vacancy-serp__vacancy-employer">–Ø–Ω–¥–µ–∫—Å</a>
            <span data-qa="vacancy-serp__vacancy-compensation">200k</span>
        </div>
        '''

        soup = bs4.BeautifulSoup(html_no_title, 'html.parser')
        item = soup.find('div')

        result = hh_parser._parse_vacancy_item(item)
        assert result is None  # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        print("    ‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π")


# ========== –¢–ï–°–¢–´ SUPERJOB –ü–ê–†–°–ï–†–ê ==========

class TestSuperJobParser:
    """
    üß™ –ö–ê–¢–ï–ì–û–†–ò–Ø: –¢–µ—Å—Ç—ã SuperJob –ø–∞—Ä—Å–µ—Ä–∞

    –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º: –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å SuperJob API
    –ó–∞—á–µ–º –≤–∞–∂–Ω–æ: SuperJob - –≤—Ç–æ—Ä–æ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
    """

    def test_init_correct_values(self, superjob_parser):
        """
        ‚úÖ –¢–ï–°–¢: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SuperJob –ø–∞—Ä—Å–µ—Ä–∞

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü—Ä–æ–≤–µ—Ä—è–µ–º source_name, API URL, –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Å–ª–æ–º–∞—é—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ API –∫–ª—é—á–∞ -> 401, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL -> 404
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        assert superjob_parser.source_name == 'superjob'
        assert superjob_parser.api_url == 'https://api.superjob.ru/2.0/vacancies'
        assert 'X-Api-App-Id' in superjob_parser.headers
        assert isinstance(superjob_parser.headers['X-Api-App-Id'], str)
        print("    ‚úÖ SuperJob –ø–∞—Ä—Å–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API")

    # ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========

    @patch('requests.get')
    def test_search_api_error(self, mock_get, superjob_parser):
        """
        ‚ùå –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ SuperJob API

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö API SuperJob
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º RequestException –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —É–±—å–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –Ω–µ –ø–∞–¥–∞–µ—Ç
        """
        import requests
        mock_get.side_effect = requests.RequestException("API error")

        result = superjob_parser.search('Python')
        assert result == []
        print("    ‚úÖ SuperJob –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API")

    @patch('requests.get')
    def test_search_json_decode_error(self, mock_get, superjob_parser):
        """
        ‚ùå –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ú–æ–∫–∞–µ–º ValueError –ø—Ä–∏ json.decode()
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ-JSON –æ—Ç–≤–µ—Ç
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: ValueError –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.side_effect = ValueError("Invalid JSON")
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response

        result = superjob_parser.search('Python')
        assert result == []
        print("    ‚úÖ SuperJob –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON")

    # ========== –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–• ==========

    def test_parse_vacancy_object_complete(self, superjob_parser):
        """
        üîß –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ API

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –æ–±—ä–µ–∫—Ç–∞
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è API –ø–∞—Ä—Å–µ—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API –æ—Ç–≤–µ—Ç–∞
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í—Å–µ –ø–æ–ª—è –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        """
        vacancy_obj = {
            'profession': 'Python Developer',
            'firm_name': '–Ø–Ω–¥–µ–∫—Å',
            'payment_from': 200000,
            'payment_to': 300000,
            'currency': 'rub',
            'link': 'https://superjob.ru/vacancy/12345'
        }

        result = superjob_parser._parse_vacancy_object(vacancy_obj)

        assert isinstance(result, dict)
        assert result['title'] == 'Python Developer'
        assert result['company'] == '–Ø–Ω–¥–µ–∫—Å'
        assert result['salary'] == '–æ—Ç 200000 –¥–æ 300000 rub'
        assert result['source'] == 'superjob'
        assert result['link'] == 'https://superjob.ru/vacancy/12345'
        print("    ‚úÖ SuperJob –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π")

    def test_parse_vacancy_object_no_salary(self, superjob_parser):
        """
        üîß –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–π –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü–æ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ú–Ω–æ–≥–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –°—Ç–∞–≤–∏—Ç "–ù–µ —É–∫–∞–∑–∞–Ω–∞" –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
        """
        vacancy_obj = {
            'profession': 'Python Developer',
            'firm_name': 'Test Company',
            'payment_from': 0,
            'payment_to': 0,
            'currency': '',
            'link': 'https://superjob.ru/vacancy/test'
        }

        result = superjob_parser._parse_vacancy_object(vacancy_obj)
        assert result['salary'] == '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        print("    ‚úÖ SuperJob –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã")

    def test_parse_vacancy_object_partial_salary(self, superjob_parser):
        """
        üîß –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —á–∞—Å—Ç–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—Ä–ø–ª–∞—Ç–µ

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –û–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏ "–æ—Ç X" –∏ "–¥–æ Y"
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ß–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω—è—è –∏–ª–∏ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç "–æ—Ç X" –∏–ª–∏ "–¥–æ Y"
        """
        # –¢–æ–ª—å–∫–æ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (payment_from)
        vacancy_obj1 = {
            'profession': 'Developer',
            'firm_name': 'Company',
            'payment_from': 100000,
            'payment_to': 0,
            'currency': 'rub',
            'link': 'https://superjob.ru/vacancy/1'
        }

        result1 = superjob_parser._parse_vacancy_object(vacancy_obj1)
        assert result1['salary'] == '–æ—Ç 100000 rub'

        # –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (payment_to)
        vacancy_obj2 = {
            'profession': 'Developer',
            'firm_name': 'Company',
            'payment_from': 0,
            'payment_to': 200000,
            'currency': 'rub',
            'link': 'https://superjob.ru/vacancy/2'
        }

        result2 = superjob_parser._parse_vacancy_object(vacancy_obj2)
        assert result2['salary'] == '–¥–æ 200000 rub'
        print("    ‚úÖ SuperJob –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∞—Å—Ç–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–ø–ª–∞—Ç–µ")


# ========== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ ==========

class TestParsersIntegration:
    """
    üß™ –ö–ê–¢–ï–ì–û–†–ò–Ø: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–æ–≤

    –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π –∏ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ API
    –ó–∞—á–µ–º –≤–∞–∂–Ω–æ: –ü–∞—Ä—Å–µ—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –æ–±—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    """

    def test_parsers_interface_consistency(self, hh_parser, superjob_parser):
        """
        üîó –¢–ï–°–¢: –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —É –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: –†–∞–∑–Ω—ã–π API —Å–ª–æ–º–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –∏–º–µ—é—Ç search() –∏ save_vacancy()
        """
        # –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        required_methods = ['search', 'save_vacancy']

        for method in required_methods:
            assert hasattr(hh_parser, method)
            assert hasattr(superjob_parser, method)
            assert callable(getattr(hh_parser, method))
            assert callable(getattr(superjob_parser, method))

        # –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ source_name
        assert hh_parser.source_name is not None
        assert superjob_parser.source_name is not None
        assert hh_parser.source_name != superjob_parser.source_name
        print("    ‚úÖ –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –∏–º–µ—é—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞")


# ========== –¢–ï–°–¢–´ –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê ==========

class TestProjectStructure:
    """
    üß™ –ö–ê–¢–ï–ì–û–†–ò–Ø: –¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞

    –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º: –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –∏ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    –ó–∞—á–µ–º –≤–∞–∂–Ω–æ: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ–º–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    """

    def test_parsers_folder_exists(self):
        """
        üèóÔ∏è –¢–ï–°–¢: –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ parsers

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ù–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏ —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ parsers/
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –ë–µ–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: ImportError –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ü–∞–ø–∫–∞ parsers/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        parsers_path = os.path.join(project_root, 'parsers')
        assert os.path.exists(parsers_path), "–ü–∞–ø–∫–∞ parsers –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        print("    ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ parsers/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def test_parser_files_exist(self):
        """
        üèóÔ∏è –¢–ï–°–¢: –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä—Å–µ—Ä–æ–≤

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä—Å–µ—Ä–æ–≤
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª: base_parser.py, hh_parser.py, superjob_parser.py
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª—é–±–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–ª–æ–º–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: ModuleNotFoundError –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í—Å–µ —Ñ–∞–π–ª—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ
        """
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        parsers_path = os.path.join(project_root, 'parsers')

        required_files = [
            'base_parser.py',
            'hh_parser.py',
            'superjob_parser.py'
        ]

        for file in required_files:
            file_path = os.path.join(parsers_path, file)
            assert os.path.exists(file_path), f"–§–∞–π–ª {file} –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        print("    ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

    def test_imports_work(self):
        """
        üèóÔ∏è –¢–ï–°–¢: –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤

        üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –í—Å–µ –º–æ–¥—É–ª–∏ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
        üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞
        üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ —Å–ª–æ–º–∞—é—Ç –∏–º–ø–æ—Ä—Ç—ã
        üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è: SyntaxError, NameError –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        ‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –í—Å–µ –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ
        """
        try:
            from parsers.base_parser import BaseParser
            from parsers.hh_parser import HHParser
            from parsers.superjob_parser import SuperJobParser

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
            assert callable(BaseParser)
            assert callable(HHParser)
            assert callable(SuperJobParser)
            print("    ‚úÖ –í—Å–µ –∫–ª–∞—Å—Å—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")

        except ImportError as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")


if __name__ == '__main__':
    print("""
üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –° –ü–û–î–†–û–ë–ù–´–ú–ò –û–ü–ò–°–ê–ù–ò–Ø–ú–ò

–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:
üéØ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º - —Ü–µ–ª—å —Ç–µ—Å—Ç–∞
üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º - –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è 
üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ - –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
üö® –ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
‚ú® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å

–ó–∞–ø—É—Å–∫: pytest {__file__} -v -s
    """)
    pytest.main([__file__, '-v', '-s'])